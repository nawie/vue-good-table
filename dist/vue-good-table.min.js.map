{"version":3,"file":"vue-good-table.min.js","sources":["../src/components/utils/constants.js","../src/components/utils/diacritics.js","../src/components/types/default.js","../node_modules/vue-runtime-helpers/dist/normalize-component.mjs","../src/components/pagination/VgtPaginationPageInfo.vue","../src/components/pagination/VgtPagination.vue","../src/components/VgtGlobalSearch.vue","../src/components/utils/sort.js","../src/components/VgtTableHeader.vue","../src/components/VgtFilterRow.vue","../src/components/VgtHeaderRow.vue","../src/components/types/date.js","../src/components/types/number.js","../src/components/types/decimal.js","../src/components/types/percentage.js","../src/components/types/boolean.js","../src/components/Table.vue","../src/components/types/index.js","../src/index.js"],"sourcesContent":["const DEFAULT_SORT_TYPE = 'asc';\nconst SORT_TYPES = {\n  Ascending: 'asc',\n  Descending: 'desc',\n  None: 'none',\n};\n\nconst PAGINATION_MODES = {\n  Pages: 'pages',\n  Records: 'records',\n};\nconst DEFAULT_ROWS_PER_PAGE_DROPDOWN = [10, 20, 30, 40, 50];\n\nexport {\n  DEFAULT_SORT_TYPE,\n  SORT_TYPES,\n\n  PAGINATION_MODES,\n  DEFAULT_ROWS_PER_PAGE_DROPDOWN,\n};\n","// all diacritics\nlet diacritics = {\n  a: [\n    \"a\",\n    \"à\",\n    \"á\",\n    \"â\",\n    \"ã\",\n    \"ä\",\n    \"å\",\n    \"æ\",\n    \"ā\",\n    \"ă\",\n    \"ą\",\n    \"ǎ\",\n    \"ǟ\",\n    \"ǡ\",\n    \"ǻ\",\n    \"ȁ\",\n    \"ȃ\",\n    \"ȧ\",\n    \"ɐ\",\n    \"ɑ\",\n    \"ɒ\",\n    \"ͣ\",\n    \"а\",\n    \"ӑ\",\n    \"ӓ\",\n    \"ᵃ\",\n    \"ᵄ\",\n    \"ᶏ\",\n    \"ḁ\",\n    \"ẚ\",\n    \"ạ\",\n    \"ả\",\n    \"ấ\",\n    \"ầ\",\n    \"ẩ\",\n    \"ẫ\",\n    \"ậ\",\n    \"ắ\",\n    \"ằ\",\n    \"ẳ\",\n    \"ẵ\",\n    \"ặ\",\n    \"ₐ\",\n    \"ⱥ\",\n    \"ａ\",\n  ],\n  b: [\"b\", \"ƀ\", \"ƃ\", \"ɓ\", \"ᖯ\", \"ᵇ\", \"ᵬ\", \"ᶀ\", \"ḃ\", \"ḅ\", \"ḇ\", \"ｂ\"],\n  c: [\"c\", \"ç\", \"ć\", \"ĉ\", \"ċ\", \"č\", \"ƈ\", \"ȼ\", \"ɕ\", \"ͨ\", \"ᴄ\", \"ᶜ\", \"ḉ\", \"ↄ\", \"ｃ\"],\n  d: [\n    \"d\",\n    \"ď\",\n    \"đ\",\n    \"Ƌ\",\n    \"ƌ\",\n    \"ȡ\",\n    \"ɖ\",\n    \"ɗ\",\n    \"ͩ\",\n    \"ᵈ\",\n    \"ᵭ\",\n    \"ᶁ\",\n    \"ᶑ\",\n    \"ḋ\",\n    \"ḍ\",\n    \"ḏ\",\n    \"ḑ\",\n    \"ḓ\",\n    \"ｄ\",\n  ],\n  e: [\n    \"e\",\n    \"è\",\n    \"é\",\n    \"ê\",\n    \"ë\",\n    \"ē\",\n    \"ĕ\",\n    \"ė\",\n    \"ę\",\n    \"ě\",\n    \"ǝ\",\n    \"ȅ\",\n    \"ȇ\",\n    \"ȩ\",\n    \"ɇ\",\n    \"ɘ\",\n    \"ͤ\",\n    \"ᵉ\",\n    \"ᶒ\",\n    \"ḕ\",\n    \"ḗ\",\n    \"ḙ\",\n    \"ḛ\",\n    \"ḝ\",\n    \"ẹ\",\n    \"ẻ\",\n    \"ẽ\",\n    \"ế\",\n    \"ề\",\n    \"ể\",\n    \"ễ\",\n    \"ệ\",\n    \"ₑ\",\n    \"ｅ\",\n  ],\n  f: [\"f\", \"ƒ\", \"ᵮ\", \"ᶂ\", \"ᶠ\", \"ḟ\", \"ｆ\"],\n  g: [\"g\", \"ĝ\", \"ğ\", \"ġ\", \"ģ\", \"ǥ\", \"ǧ\", \"ǵ\", \"ɠ\", \"ɡ\", \"ᵍ\", \"ᵷ\", \"ᵹ\", \"ᶃ\", \"ᶢ\", \"ḡ\", \"ｇ\"],\n  h: [\n    \"h\",\n    \"ĥ\",\n    \"ħ\",\n    \"ƕ\",\n    \"ȟ\",\n    \"ɥ\",\n    \"ɦ\",\n    \"ʮ\",\n    \"ʯ\",\n    \"ʰ\",\n    \"ʱ\",\n    \"ͪ\",\n    \"Һ\",\n    \"һ\",\n    \"ᑋ\",\n    \"ᶣ\",\n    \"ḣ\",\n    \"ḥ\",\n    \"ḧ\",\n    \"ḩ\",\n    \"ḫ\",\n    \"ⱨ\",\n    \"ｈ\",\n  ],\n  i: [\n    \"i\",\n    \"ì\",\n    \"í\",\n    \"î\",\n    \"ï\",\n    \"ĩ\",\n    \"ī\",\n    \"ĭ\",\n    \"į\",\n    \"ǐ\",\n    \"ȉ\",\n    \"ȋ\",\n    \"ɨ\",\n    \"ͥ\",\n    \"ᴉ\",\n    \"ᵎ\",\n    \"ᵢ\",\n    \"ᶖ\",\n    \"ᶤ\",\n    \"ḭ\",\n    \"ḯ\",\n    \"ỉ\",\n    \"ị\",\n    \"ｉ\",\n  ],\n  j: [\"j\", \"ĵ\", \"ǰ\", \"ɉ\", \"ʝ\", \"ʲ\", \"ᶡ\", \"ᶨ\", \"ｊ\"],\n  k: [\"k\", \"ķ\", \"ƙ\", \"ǩ\", \"ʞ\", \"ᵏ\", \"ᶄ\", \"ḱ\", \"ḳ\", \"ḵ\", \"ⱪ\", \"ｋ\"],\n  l: [\n    \"l\",\n    \"ĺ\",\n    \"ļ\",\n    \"ľ\",\n    \"ŀ\",\n    \"ł\",\n    \"ƚ\",\n    \"ȴ\",\n    \"ɫ\",\n    \"ɬ\",\n    \"ɭ\",\n    \"ˡ\",\n    \"ᶅ\",\n    \"ᶩ\",\n    \"ᶪ\",\n    \"ḷ\",\n    \"ḹ\",\n    \"ḻ\",\n    \"ḽ\",\n    \"ℓ\",\n    \"ⱡ\",\n  ],\n  m: [\"m\", \"ɯ\", \"ɰ\", \"ɱ\", \"ͫ\", \"ᴟ\", \"ᵐ\", \"ᵚ\", \"ᵯ\", \"ᶆ\", \"ᶬ\", \"ᶭ\", \"ḿ\", \"ṁ\", \"ṃ\", \"㎡\", \"㎥\", \"ｍ\"],\n  n: [\n    \"n\",\n    \"ñ\",\n    \"ń\",\n    \"ņ\",\n    \"ň\",\n    \"ŉ\",\n    \"ƞ\",\n    \"ǹ\",\n    \"ȵ\",\n    \"ɲ\",\n    \"ɳ\",\n    \"ᵰ\",\n    \"ᶇ\",\n    \"ᶮ\",\n    \"ᶯ\",\n    \"ṅ\",\n    \"ṇ\",\n    \"ṉ\",\n    \"ṋ\",\n    \"ⁿ\",\n    \"ｎ\",\n  ],\n  o: [\n    \"o\",\n    \"ò\",\n    \"ó\",\n    \"ô\",\n    \"õ\",\n    \"ö\",\n    \"ø\",\n    \"ō\",\n    \"ŏ\",\n    \"ő\",\n    \"ơ\",\n    \"ǒ\",\n    \"ǫ\",\n    \"ǭ\",\n    \"ǿ\",\n    \"ȍ\",\n    \"ȏ\",\n    \"ȫ\",\n    \"ȭ\",\n    \"ȯ\",\n    \"ȱ\",\n    \"ɵ\",\n    \"ͦ\",\n    \"о\",\n    \"ӧ\",\n    \"ө\",\n    \"ᴏ\",\n    \"ᴑ\",\n    \"ᴓ\",\n    \"ᴼ\",\n    \"ᵒ\",\n    \"ᶱ\",\n    \"ṍ\",\n    \"ṏ\",\n    \"ṑ\",\n    \"ṓ\",\n    \"ọ\",\n    \"ỏ\",\n    \"ố\",\n    \"ồ\",\n    \"ổ\",\n    \"ỗ\",\n    \"ộ\",\n    \"ớ\",\n    \"ờ\",\n    \"ở\",\n    \"ỡ\",\n    \"ợ\",\n    \"ₒ\",\n    \"ｏ\",\n    \"𐐬\",\n  ],\n  p: [\"p\", \"ᵖ\", \"ᵱ\", \"ᵽ\", \"ᶈ\", \"ṕ\", \"ṗ\", \"ｐ\"],\n  q: [\"q\", \"ɋ\", \"ʠ\", \"ᛩ\", \"ｑ\"],\n  r: [\n    \"r\",\n    \"ŕ\",\n    \"ŗ\",\n    \"ř\",\n    \"ȑ\",\n    \"ȓ\",\n    \"ɍ\",\n    \"ɹ\",\n    \"ɻ\",\n    \"ʳ\",\n    \"ʴ\",\n    \"ʵ\",\n    \"ͬ\",\n    \"ᵣ\",\n    \"ᵲ\",\n    \"ᶉ\",\n    \"ṙ\",\n    \"ṛ\",\n    \"ṝ\",\n    \"ṟ\",\n  ],\n  s: [\"s\", \"ś\", \"ŝ\", \"ş\", \"š\", \"ș\", \"ʂ\", \"ᔆ\", \"ᶊ\", \"ṡ\", \"ṣ\", \"ṥ\", \"ṧ\", \"ṩ\", \"ｓ\"],\n  t: [\n    \"t\",\n    \"ţ\",\n    \"ť\",\n    \"ŧ\",\n    \"ƫ\",\n    \"ƭ\",\n    \"ț\",\n    \"ʇ\",\n    \"ͭ\",\n    \"ᵀ\",\n    \"ᵗ\",\n    \"ᵵ\",\n    \"ᶵ\",\n    \"ṫ\",\n    \"ṭ\",\n    \"ṯ\",\n    \"ṱ\",\n    \"ẗ\",\n    \"ｔ\",\n  ],\n  u: [\n    \"u\",\n    \"ù\",\n    \"ú\",\n    \"û\",\n    \"ü\",\n    \"ũ\",\n    \"ū\",\n    \"ŭ\",\n    \"ů\",\n    \"ű\",\n    \"ų\",\n    \"ư\",\n    \"ǔ\",\n    \"ǖ\",\n    \"ǘ\",\n    \"ǚ\",\n    \"ǜ\",\n    \"ȕ\",\n    \"ȗ\",\n    \"ͧ\",\n    \"ߎ\",\n    \"ᵘ\",\n    \"ᵤ\",\n    \"ṳ\",\n    \"ṵ\",\n    \"ṷ\",\n    \"ṹ\",\n    \"ṻ\",\n    \"ụ\",\n    \"ủ\",\n    \"ứ\",\n    \"ừ\",\n    \"ử\",\n    \"ữ\",\n    \"ự\",\n    \"ｕ\",\n  ],\n  v: [\"v\", \"ʋ\", \"ͮ\", \"ᵛ\", \"ᵥ\", \"ᶹ\", \"ṽ\", \"ṿ\", \"ⱱ\", \"ｖ\", \"ⱴ\"],\n  w: [\"w\", \"ŵ\", \"ʷ\", \"ᵂ\", \"ẁ\", \"ẃ\", \"ẅ\", \"ẇ\", \"ẉ\", \"ẘ\", \"ⱳ\", \"ｗ\"],\n  x: [\"x\", \"̽\", \"͓\", \"ᶍ\", \"ͯ\", \"ẋ\", \"ẍ\", \"ₓ\", \"ｘ\"],\n  y: [\"y\", \"ý\", \"ÿ\", \"ŷ\", \"ȳ\", \"ɏ\", \"ʸ\", \"ẏ\", \"ỳ\", \"ỵ\", \"ỷ\", \"ỹ\", \"ｙ\"],\n  z: [\n    \"z\",\n    \"ź\",\n    \"ż\",\n    \"ž\",\n    \"ƶ\",\n    \"ȥ\",\n    \"ɀ\",\n    \"ʐ\",\n    \"ʑ\",\n    \"ᙆ\",\n    \"ᙇ\",\n    \"ᶻ\",\n    \"ᶼ\",\n    \"ᶽ\",\n    \"ẑ\",\n    \"ẓ\",\n    \"ẕ\",\n    \"ⱬ\",\n    \"ｚ\",\n  ],\n};\n\n// Precompiled Object with { key = Diacritic, value = real-Character }\nconst compiledDiactitics = (function() {\n  let x = {};\n\n  for (let key in diacritics) {\n    let ok = diacritics[key];\n\n    for (let rval in ok) {\n      let val = ok[rval];\n\n      // Do not replace the char with itself\n      if (val !== key) {\n        x[val] = key;\n      }\n    }\n  }\n\n  return x;\n})();\n\n// Regex for detecting non-ASCII-Characters in String\nconst regexNonASCII = /[^a-z0-9\\s,.-]/;\n\n/*\n * Main function of the module which removes all diacritics from the received text\n */\nconst diacriticless = (text) => {\n  // When there are only ascii-Characters in the string, skip processing and return text right away\n  if (text.search(regexNonASCII) === -1) {\n    return text;\n  }\n\n  let result = \"\";\n\n  let len = text.length;\n  for (var i = 0; i < len; i++) {\n    let searchChar = text.charAt(i);\n\n    // If applicable replace the diacritic character with the real one or use the original value\n    result += searchChar in compiledDiactitics ? compiledDiactitics[searchChar] : searchChar;\n  }\n\n  return result;\n};\n\nexport {diacriticless};\n","import { diacriticless } from '../utils/diacritics';\n\nconst escapeRegExp = str => str.replace(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\nexport default {\n  format(x) {\n    return x;\n  },\n  filterPredicate(rowval, filter, skipDiacritics = false, fromDropdown = false) {\n    // take care of nulls\n    if (typeof rowval === 'undefined' || rowval === null) {\n      return false;\n    }\n\n    // row value\n    const rowValue = skipDiacritics\n      ? String(rowval).toLowerCase()\n      : diacriticless(escapeRegExp(String(rowval)).toLowerCase());\n\n    // search term\n    const searchTerm = skipDiacritics\n      ? filter.toLowerCase()\n      : diacriticless(escapeRegExp(filter).toLowerCase());\n\n    // comparison\n    return fromDropdown ? rowValue === searchTerm : (rowValue.indexOf(searchTerm) > -1);\n  },\n\n  compare(x, y) {\n    function cook(d) {\n      if (typeof d === 'undefined' || d === null) return '';\n      return diacriticless(String(d).toLowerCase());\n    }\n    x = cook(x);\n    y = cook(y);\n    if (x < y) return -1;\n    if (x > y) return 1;\n    return 0;\n  },\n};\n","function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\r\n    if (typeof shadowMode !== 'boolean') {\r\n        createInjectorSSR = createInjector;\r\n        createInjector = shadowMode;\r\n        shadowMode = false;\r\n    }\r\n    // Vue.extend constructor export interop.\r\n    const options = typeof script === 'function' ? script.options : script;\r\n    // render functions\r\n    if (template && template.render) {\r\n        options.render = template.render;\r\n        options.staticRenderFns = template.staticRenderFns;\r\n        options._compiled = true;\r\n        // functional template\r\n        if (isFunctionalTemplate) {\r\n            options.functional = true;\r\n        }\r\n    }\r\n    // scopedId\r\n    if (scopeId) {\r\n        options._scopeId = scopeId;\r\n    }\r\n    let hook;\r\n    if (moduleIdentifier) {\r\n        // server build\r\n        hook = function (context) {\r\n            // 2.3 injection\r\n            context =\r\n                context || // cached call\r\n                    (this.$vnode && this.$vnode.ssrContext) || // stateful\r\n                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional\r\n            // 2.2 with runInNewContext: true\r\n            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\r\n                context = __VUE_SSR_CONTEXT__;\r\n            }\r\n            // inject component styles\r\n            if (style) {\r\n                style.call(this, createInjectorSSR(context));\r\n            }\r\n            // register component module identifier for async chunk inference\r\n            if (context && context._registeredComponents) {\r\n                context._registeredComponents.add(moduleIdentifier);\r\n            }\r\n        };\r\n        // used by ssr in case component is cached and beforeCreate\r\n        // never gets called\r\n        options._ssrRegister = hook;\r\n    }\r\n    else if (style) {\r\n        hook = shadowMode\r\n            ? function (context) {\r\n                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));\r\n            }\r\n            : function (context) {\r\n                style.call(this, createInjector(context));\r\n            };\r\n    }\r\n    if (hook) {\r\n        if (options.functional) {\r\n            // register for functional component in vue file\r\n            const originalRender = options.render;\r\n            options.render = function renderWithStyleInjection(h, context) {\r\n                hook.call(context);\r\n                return originalRender(h, context);\r\n            };\r\n        }\r\n        else {\r\n            // inject component registration as beforeCreate hook\r\n            const existing = options.beforeCreate;\r\n            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\r\n        }\r\n    }\r\n    return script;\r\n}\n\nexport default normalizeComponent;\n//# sourceMappingURL=normalize-component.mjs.map\n","<template>\n<div class=\"footer__navigation__page-info\">\n  <div v-if=\"infoFn\">\n    {{infoFn(infoParams)}}\n  </div>\n  <form v-else-if=\"mode === 'pages'\" @submit.prevent>\n    <label :for=\"id\" class=\"page-info__label\">\n      <span>{{pageText}}</span>\n      <input\n        :id=\"id\"\n        aria-describedby=\"change-page-hint\"\n        aria-controls=\"vgb-table\"\n        class=\"footer__navigation__page-info__current-entry\"\n        type=\"text\"\n        @keyup.enter.stop=\"changePage\"\n        :value=\"currentPage\"> \n      <span>{{pageInfo}}</span>\n    </label>\n    <span id=\"change-page-hint\" style=\"display: none;\">\n      Type a page number and press Enter to change the page.\n    </span>\n  </form>\n  <div v-else>\n    {{recordInfo}}\n  </div>\n</div>\n</template>\n\n<script>\nimport {\n  PAGINATION_MODES,\n} from '../utils/constants';\n\nexport default {\n  name: 'VgtPaginationPageInfo',\n  props: {\n    currentPage: {\n      default: 1,\n    },\n    lastPage: {\n      default: 1,\n    },\n    totalRecords: {\n      default: 0,\n    },\n    ofText: {\n      default: 'of',\n      type: String,\n    },\n    pageText: {\n      default: 'page',\n      type: String,\n    },\n    currentPerPage: {},\n    mode: {\n      default: PAGINATION_MODES.Records,\n    },\n    infoFn: { default: null },\n  },\n  data() {\n    return {\n      id: this.getId(),\n    };\n  },\n  computed: {\n    pageInfo() {\n      return `${this.ofText} ${this.lastPage}`;\n    },\n    firstRecordOnPage() {\n      return ((this.currentPage - 1) * this.currentPerPage) + 1;\n    },\n    lastRecordOnPage() {\n      // if the setting is set to 'all'\n      if(this.currentPerPage === -1) {\n        return this.totalRecords;\n      }\n      return Math.min(this.totalRecords, this.currentPage * this.currentPerPage);\n    },\n    recordInfo() {\n      let first = this.firstRecordOnPage;\n      const last = this.lastRecordOnPage;\n\n      if (last === 0) {\n        first = 0;\n      }\n\n      return `${first} - ${last} ${this.ofText} ${this.totalRecords}`;\n    },\n    infoParams() {\n      let first = this.firstRecordOnPage;\n      const last = this.lastRecordOnPage;\n      if (last === 0) {\n        first = 0;\n      }\n      return {\n        firstRecordOnPage: first,\n        lastRecordOnPage: last,\n        totalRecords: this.totalRecords,\n        currentPage: this.currentPage,\n        totalPage: this.lastPage,\n      };\n    },\n  },\n  methods: {\n    getId() {\n      return `vgt-page-input-${Math.floor(Math.random() * Date.now())}`;\n    },\n    changePage(event) {\n      const value = parseInt(event.target.value, 10);\n\n      //! invalid number\n      if (Number.isNaN(value)\n        || value > this.lastPage\n        || value < 1) {\n        event.target.value = this.currentPage;\n        return false;\n      }\n\n      //* valid number\n      event.target.value = value;\n      this.$emit('page-changed', value);\n    },\n  },\n  mounted() {\n  },\n  components: {\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>\n","<template>\n  <div class=\"vgt-wrap__footer vgt-clearfix\">\n    <div v-if=\"perPageDropdownEnabled\" class=\"footer__row-count vgt-pull-left\">\n      <form>\n        <label :for=\"id\" class=\"footer__row-count__label\">{{rowsPerPageText}}:</label>\n        <select\n          :id=\"id\"\n          autocomplete=\"off\"\n          name=\"perPageSelect\"\n          class=\"footer__row-count__select\"\n          v-model=\"currentPerPage\"\n          @change=\"perPageChanged\"\n          aria-controls=\"vgt-table\">\n          <option\n            v-for=\"(option, idx) in rowsPerPageOptions\"\n            :key=\"idx\"\n            :value=\"option\">\n            {{ option }}\n          </option>\n          <option v-if=\"paginateDropdownAllowAll\" :value=\"-1\">{{allText}}</option>\n        </select>\n      </form>\n    </div>\n    <div class=\"footer__navigation vgt-pull-right\">\n      <pagination-page-info\n        @page-changed=\"changePage\"\n        :total-records=\"total\"\n        :last-page=\"pagesCount\"\n        :current-page=\"currentPage\"\n        :current-per-page=\"currentPerPage\"\n        :of-text=\"ofText\"\n        :page-text=\"pageText\"\n        :info-fn=\"infoFn\"\n        :mode=\"mode\" />\n      <button\n        v-if=\"jumpFirstOrLast\"\n        type=\"button\"\n        aria-controls=\"vgt-table\"\n        class=\"footer__navigation__page-btn\"\n        :class=\"{ disabled: !firstIsPossible }\"\n        @click.prevent.stop=\"firstPage\"\n      >\n        <span\n          aria-hidden=\"true\"\n          class=\"chevron\"\n          v-bind:class=\"{ left: !rtl, right: rtl }\"\n        ></span>\n        <span>{{ firstText }}</span>\n      </button>\n\n      <button\n        type=\"button\"\n        aria-controls=\"vgt-table\"\n        class=\"footer__navigation__page-btn\"\n        :class=\"{ disabled: !prevIsPossible }\"\n        @click.prevent.stop=\"previousPage\">\n        <span aria-hidden=\"true\" class=\"chevron\" v-bind:class=\"{ 'left': !rtl, 'right': rtl }\"></span>\n        <span>{{prevText}}</span>\n      </button>\n\n      <button\n        type=\"button\"\n        aria-controls=\"vgt-table\"\n        class=\"footer__navigation__page-btn\"\n        :class=\"{ disabled: !nextIsPossible }\"\n        @click.prevent.stop=\"nextPage\">\n        <span>{{nextText}}</span>\n        <span aria-hidden=\"true\" class=\"chevron\" v-bind:class=\"{ 'right': !rtl, 'left': rtl }\"></span>\n      </button>\n\n      <button\n        v-if=\"jumpFirstOrLast\"\n        type=\"button\"\n        aria-controls=\"vgt-table\"\n        class=\"footer__navigation__page-btn\"\n        :class=\"{ disabled: !lastIsPossible }\"\n        @click.prevent.stop=\"lastPage\"\n      >\n        <span>{{ lastText }}</span>\n        <span\n          aria-hidden=\"true\"\n          class=\"chevron\"\n          v-bind:class=\"{ right: !rtl, left: rtl }\"\n        ></span>\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport VgtPaginationPageInfo from './VgtPaginationPageInfo.vue';\nimport {\n  PAGINATION_MODES,\n  DEFAULT_ROWS_PER_PAGE_DROPDOWN\n} from '../utils/constants';\n\nexport default {\n  name: 'VgtPagination',\n  props: {\n    styleClass: { default: 'table table-bordered' },\n    total: { default: null },\n    perPage: {},\n    rtl: { default: false },\n    perPageDropdownEnabled: { default: true },\n    customRowsPerPageDropdown: { default() { return []; } },\n    paginateDropdownAllowAll: { default: true },\n    mode: { default: PAGINATION_MODES.Records },\n    jumpFirstOrLast: { default: false },\n\n    // text options\n    firstText: { default: \"First\" },\n    lastText: { default: \"Last\" },\n    nextText: { default: 'Next' },\n    prevText: { default: 'Prev' },\n    rowsPerPageText: { default: 'Rows per page:' },\n    ofText: { default: 'of' },\n    pageText: { default: 'page' },\n    allText: { default: 'All' },\n    infoFn: { default: null },\n  },\n\n  data() {\n    return {\n      id: this.getId(),\n      currentPage: 1,\n      prevPage: 0,\n      currentPerPage: 10,\n      rowsPerPageOptions: [],\n    };\n  },\n  watch: {\n    perPage: {\n      handler(newValue, oldValue) {\n        this.handlePerPage();\n        this.perPageChanged(oldValue);\n      },\n      immediate: true,\n    },\n\n    customRowsPerPageDropdown() {\n      this.handlePerPage();\n    },\n\n    total: {\n      handler(newValue, oldValue) {\n        if(this.rowsPerPageOptions.indexOf(this.currentPerPage) === -1) {\n          this.currentPerPage = newValue;\n        }\n      }\n    }\n  },\n\n  computed: {\n    // Number of pages\n    pagesCount() {\n      // if the setting is set to 'all'\n      if(this.currentPerPage === -1) {\n        return 1;\n      }\n      const quotient = Math.floor(this.total / this.currentPerPage);\n      const remainder = this.total % this.currentPerPage;\n\n      return remainder === 0 ? quotient : quotient + 1;\n    },\n\n    // Can go to first page\n    firstIsPossible() {\n      return this.currentPage > 1;\n    },\n\n    // Can go to last page\n    lastIsPossible() {\n      return this.currentPage < Math.ceil(this.total / this.currentPerPage);\n    },\n\n    // Can go to next page\n    nextIsPossible() {\n      return this.currentPage < this.pagesCount;\n    },\n\n    // Can go to previous page\n    prevIsPossible() {\n      return this.currentPage > 1;\n    },\n  },\n\n  methods: {\n    getId() {\n      return `vgt-select-rpp-${Math.floor(Math.random() * Date.now())}`;\n    },\n    // Change current page\n    changePage(pageNumber, emit = true) {\n      if (pageNumber > 0 && this.total > this.currentPerPage * (pageNumber - 1)) {\n        this.prevPage = this.currentPage;\n        this.currentPage = pageNumber;\n        this.pageChanged(emit);\n      }\n    },\n\n    // Go to first page\n    firstPage() {\n      if (this.firstIsPossible) {\n        this.currentPage = 1;\n        this.prevPage = 0;\n        this.pageChanged();\n      }\n    },\n\n    // Go to last page\n    lastPage() {\n      if (this.lastIsPossible) {\n        this.currentPage = this.pagesCount;\n        this.prev = this.currentPage - 1;\n        this.pageChanged();\n      }\n    },\n\n    // Go to next page\n    nextPage() {\n      if (this.nextIsPossible) {\n        this.prevPage = this.currentPage;\n        ++this.currentPage;\n        this.pageChanged();\n      }\n    },\n\n    // Go to previous page\n    previousPage() {\n      if (this.prevIsPossible) {\n        this.prevPage = this.currentPage;\n        --this.currentPage;\n        this.pageChanged();\n      }\n    },\n\n    // Indicate page changing\n    pageChanged(emit = true) {\n      const payload = {\n        currentPage: this.currentPage,\n        prevPage: this.prevPage,\n      };\n      if (!emit) payload.noEmit = true;\n      this.$emit('page-changed', payload);\n    },\n\n    // Indicate per page changing\n    perPageChanged(oldValue) {\n      // go back to first page\n      if (oldValue) {\n        //* only emit if this isn't first initialization\n        this.$emit('per-page-changed', { currentPerPage: this.currentPerPage });\n      }\n      this.changePage(1, false);\n    },\n\n    // Handle per page changing\n    handlePerPage() {\n      //* if there's a custom dropdown then we use that\n      if (this.customRowsPerPageDropdown !== null\n        && (Array.isArray(this.customRowsPerPageDropdown)\n        && this.customRowsPerPageDropdown.length !== 0)) {\n        this.rowsPerPageOptions = JSON.parse(JSON.stringify(this.customRowsPerPageDropdown));\n      } else {\n        //* otherwise we use the default rows per page dropdown\n        this.rowsPerPageOptions = JSON.parse(JSON.stringify(DEFAULT_ROWS_PER_PAGE_DROPDOWN));\n      }\n\n      if (this.perPage) {\n        this.currentPerPage = this.perPage;\n        // if perPage doesn't already exist, we add it\n        let found = false;\n        for (let i = 0; i < this.rowsPerPageOptions.length; i++) {\n          if (this.rowsPerPageOptions[i] === this.perPage) {\n            found = true;\n          }\n        }\n        if (!found && this.perPage !== -1) {\n          this.rowsPerPageOptions.unshift(this.perPage);\n        }\n      } else {\n        // reset to default\n        this.currentPerPage = 10;\n      }\n    },\n  },\n\n  mounted() {\n  },\n\n  components: {\n    'pagination-page-info': VgtPaginationPageInfo,\n  },\n};\n</script>\n\n<style lang=\"scss\">\n\n</style>\n","<template>\n<div v-if=\"showControlBar\" class=\"vgt-global-search vgt-clearfix\">\n  <div class=\"vgt-global-search__input vgt-pull-left\">\n    <form @submit.prevent v-if=\"searchEnabled\" role=\"search\">\n      <label :for=\"id\">\n        <span aria-hidden=\"true\" class=\"input__icon\">\n        <div class=\"magnifying-glass\"></div>\n        </span>\n        <span class=\"sr-only\">Search</span>\n      </label>\n    <input\n      :id=\"id\"\n      type=\"text\"\n      class=\"vgt-input vgt-pull-left\"\n      :placeholder=\"globalSearchPlaceholder\"\n      :value=\"value\"\n      @input=\"updateValue($event.target.value)\"\n      @keyup.enter=\"entered($event.target.value)\" />\n    </form>\n  </div>\n\n  <div class=\"vgt-global-search__actions vgt-pull-right\">\n    <slot name=\"internal-table-actions\">\n    </slot>\n  </div>\n</div>\n</template>\n\n<script>\nexport default {\n  name: 'VgtGlobalSearch',\n  props: [\n    'value',\n    'searchEnabled',\n    'globalSearchPlaceholder',\n  ],\n  data() {\n    return {\n      globalSearchTerm: null,\n      id: this.getId(),\n    };\n  },\n  computed: {\n    showControlBar() {\n      if (this.searchEnabled) return true;\n      if (this.$slots && this.$slots['internal-table-actions']) return true;\n      return false;\n    },\n  },\n  methods: {\n    updateValue(value) {\n      this.$emit('input', value);\n      this.$emit('on-keyup', value);\n    },\n    entered(value) {\n      this.$emit('on-enter', value);\n    },\n    getId() {\n      return `vgt-search-${Math.floor(Math.random() * Date.now())}`;\n    },\n  },\n};\n</script>\n\n<style>\n\n</style>\n","import {\n  DEFAULT_SORT_TYPE,\n  SORT_TYPES,\n} from './constants';\n\nfunction getColumnFirstSortType(column) {\n  return column.firstSortType || DEFAULT_SORT_TYPE;\n}\n\nfunction getCurrentPrimarySort(sortArray, column) {\n  return ( sortArray.length === 1 && sortArray[0].field === column.field )\n  ? sortArray[0].type\n  : undefined;\n}\n\nfunction getNextSort(currentSort, column) {\n  if (SORT_TYPES.Descending === getColumnFirstSortType(column)\n    && currentSort === SORT_TYPES.Ascending) {\n    return SORT_TYPES.None\n  } else if (currentSort === SORT_TYPES.Ascending) {\n    return SORT_TYPES.Descending;\n  }\n  if (SORT_TYPES.Descending === getColumnFirstSortType(column)\n    && currentSort === SORT_TYPES.Descending) {\n    return SORT_TYPES.Ascending;\n  } else if (currentSort === SORT_TYPES.Descending) {\n    return SORT_TYPES.None;\n  }\n\n  if (SORT_TYPES.Descending === getColumnFirstSortType(column)\n    && currentSort === SORT_TYPES.None) {\n    return SORT_TYPES.Descending;\n  } else {\n    return SORT_TYPES.Ascending;\n  }\n\n}\n\nfunction getIndex(sortArray, column) {\n  for (let i = 0; i < sortArray.length; i++) {\n    if (column.field === sortArray[i].field) return i;\n  }\n  return -1;\n}\n\nconst primarySort = (sortArray, column) => {\n  const currentPrimarySort = getCurrentPrimarySort(sortArray, column);\n  const nextPrimarySort = getNextSort(currentPrimarySort, column);\n  return [{\n    field: column.field,\n    type: currentPrimarySort ? nextPrimarySort : getColumnFirstSortType(column),\n  }];\n};\n\nconst secondarySort = (sortArray, column) => {\n  const index = getIndex(sortArray, column);\n  if (index === -1) {\n    sortArray.push({\n      field: column.field,\n      type: getColumnFirstSortType(column),\n    });\n  } else {\n    sortArray[index].type = getNextSort(sortArray[index].type, column);\n  }\n  return sortArray;\n};\n\nexport {\n  primarySort,\n  secondarySort,\n}","<template>\n<thead>\n  <tr>\n    <th scope=\"col\" v-if=\"lineNumbers\" class=\"line-numbers\"></th>\n    <th scope=\"col\" v-if=\"selectable\" class=\"vgt-checkbox-col\">\n      <input\n        type=\"checkbox\"\n        :checked=\"allSelected\"\n        :indeterminate.prop=\"allSelectedIndeterminate\"\n        @change=\"toggleSelectAll\" />\n    </th>\n    <th v-for=\"(column, index) in columns\"\n      scope=\"col\"\n      :key=\"index\"\n      :title=\"column.tooltip\"\n      :class=\"getHeaderClasses(column, index)\"\n      :style=\"columnStyles[index]\"\n      :aria-sort=\"getColumnSortLong(column)\"\n      :aria-controls=\"`col-${index}`\"\n      v-if=\"!column.hidden\">\n      <slot name=\"table-column\" :column=\"column\">\n        {{column.label}}\n      </slot>\n        <button\n        v-if=\"isSortableColumn(column)\"\n        @click=\"sort($event, column)\">\n        <span class=\"sr-only\">\n          Sort table by {{ column.label }} in {{ getColumnSortLong(column) }} order\n          </span>\n        </button>\n    </th>\n  </tr>\n  <tr\n    is=\"vgt-filter-row\"\n    ref=\"filter-row\"\n    @filter-changed=\"filterRows\"\n    :global-search-enabled=\"searchEnabled\"\n    :line-numbers=\"lineNumbers\"\n    :selectable=\"selectable\"\n    :columns=\"columns\"\n    :mode=\"mode\"\n    :typed-columns=\"typedColumns\">\n      <template\n        slot=\"column-filter\"\n        slot-scope=\"props\"\n      >\n        <slot\n          name=\"column-filter\"\n          :column=\"props.column\"\n          :updateFilters=\"props.updateFilters\"\n        >\n        </slot>\n      </template>\n  </tr>\n</thead>\n</template>\n\n<script>\nimport VgtFilterRow from './VgtFilterRow.vue';\nimport { primarySort, secondarySort } from './utils/sort';\n\nexport default {\n  name: 'VgtTableHeader',\n  props: {\n    lineNumbers: {\n      default: false,\n      type: Boolean,\n    },\n    selectable: {\n      default: false,\n      type: Boolean,\n    },\n    allSelected: {\n      default: false,\n      type: Boolean,\n    },\n    allSelectedIndeterminate: {\n      default: false,\n      type: Boolean,\n    },\n    columns: {\n      type: Array,\n    },\n    mode: {\n      type: String,\n    },\n    typedColumns: {},\n\n    //* Sort related\n    sortable: {\n      type: Boolean,\n    },\n    multipleColumnSort: {\n      type: Boolean,\n      default: true,\n    },\n\n    getClasses: {\n      type: Function,\n    },\n\n    //* search related\n    searchEnabled: {\n      type: Boolean,\n    },\n\n    tableRef: {},\n\n    paginated: {},\n  },\n  watch: {\n    columns: {\n      handler() {\n        this.setColumnStyles();\n      },\n      immediate: true,\n    },\n    tableRef: {\n      handler() {\n        this.setColumnStyles();\n      },\n      immediate: true,\n    },\n    paginated: {\n      handler() {\n        if (this.tableRef) {\n          this.setColumnStyles();\n        }\n      },\n      deep: true,\n    },\n  },\n  data() {\n    return {\n      checkBoxThStyle: {},\n      lineNumberThStyle: {},\n      columnStyles: [],\n      sorts: [],\n      ro: null\n    };\n  },\n  computed: {\n\n  },\n  methods: {\n    reset() {\n      this.$refs['filter-row'].reset(true);\n    },\n    toggleSelectAll() {\n      this.$emit('on-toggle-select-all');\n    },\n    isSortableColumn(column) {\n      const { sortable } = column;\n      const isSortable = typeof sortable === 'boolean' ? sortable : this.sortable;\n      return isSortable;\n    },\n    sort(e, column) {\n      //* if column is not sortable, return right here\n      if (!this.isSortableColumn(column)) return;\n\n      if (e.shiftKey && this.multipleColumnSort) {\n        this.sorts = secondarySort(this.sorts, column);\n      } else {\n        this.sorts = primarySort(this.sorts, column);\n      }\n      this.$emit('on-sort-change', this.sorts);\n    },\n\n    setInitialSort(sorts) {\n      this.sorts = sorts;\n      this.$emit('on-sort-change', this.sorts);\n    },\n\n    getColumnSort(column) {\n      for (let i = 0; i < this.sorts.length; i += 1) {\n        if (this.sorts[i].field === column.field) {\n          return this.sorts[i].type || 'asc';\n        }\n      }\n      return null;\n    },\n\n    getColumnSortLong(column) {\n      return this.getColumnSort(column) === 'asc'\n        ? 'ascending'\n        : 'descending'\n    },\n\n    getHeaderClasses(column, index) {\n      const classes = Object.assign({}, this.getClasses(index, 'th'), {\n        sortable: this.isSortableColumn(column),\n        'sorting sorting-desc': this.getColumnSort(column) === 'desc',\n        'sorting sorting-asc': this.getColumnSort(column) === 'asc',\n      });\n      return classes;\n    },\n\n    filterRows(columnFilters) {\n      this.$emit('filter-changed', columnFilters);\n    },\n\n    getWidthStyle(dom) {\n      if (window && window.getComputedStyle && dom) {\n        const cellStyle = window.getComputedStyle(dom, null);\n        return {\n          width: cellStyle.width,\n        };\n      }\n      return {\n        width: 'auto',\n      };\n    },\n\n    setColumnStyles() {\n      const colStyles = [];\n      for (let i = 0; i < this.columns.length; i++) {\n        if (this.tableRef) {\n          let skip = 0;\n          if (this.selectable) skip++;\n          if (this.lineNumbers) skip++;\n          const cell = this.tableRef.rows[0].cells[i + skip];\n          colStyles.push(this.getWidthStyle(cell));\n        } else {\n          colStyles.push({\n            minWidth: this.columns[i].width ? this.columns[i].width : 'auto',\n            maxWidth: this.columns[i].width ? this.columns[i].width : 'auto',\n            width: this.columns[i].width ? this.columns[i].width : 'auto',\n          });\n        }\n      }\n      this.columnStyles = colStyles;\n    },\n\n    getColumnStyle(column, index) {\n      const styleObject = {\n        minWidth: column.width ? column.width : 'auto',\n        maxWidth: column.width ? column.width : 'auto',\n        width: column.width ? column.width : 'auto',\n      };\n      //* if fixed header we need to get width from original table\n      if (this.tableRef) {\n        if (this.selectable) index++;\n        if (this.lineNumbers) index++;\n\n        const cell = this.tableRef.rows[0].cells[index];\n        const cellStyle = window.getComputedStyle(cell, null);\n        styleObject.width = cellStyle.width;\n      }\n      return styleObject;\n    },\n  },\n  mounted() {\n    this.$nextTick(() => {\n      // We're going to watch the parent element for resize events, and calculate column widths if it changes\n      if ('ResizeObserver' in window) {\n        this.ro = new ResizeObserver(() => {\n            this.setColumnStyles();\n        });\n        this.ro.observe(this.$parent.$el);\n\n        // If this is a fixed-header table, we want to observe each column header from the non-fixed header.\n        // You can imagine two columns swapping widths, which wouldn't cause the above to trigger.\n        // This gets the first tr element of the primary table header, and iterates through its children (the th elements)\n        if (this.tableRef) {\n          Array.from(this.$parent.$refs['table-header-primary'].$el.children[0].children).forEach((header) => {\n            this.ro.observe(header);\n          })\n        }\n      }\n    });\n  },\n  beforeDestroy() {\n    if (this.ro) {\n      this.ro.disconnect();\n    }\n  },\n  components: {\n    'vgt-filter-row': VgtFilterRow,\n  },\n};\n</script>\n","<template>\n<tr v-if=\"hasFilterRow\">\n  <th v-if=\"lineNumbers\"></th>\n  <th v-if=\"selectable\"></th>\n  <th\n    v-for=\"(column, index) in columns\" :key=\"index\"\n    v-if=\"!column.hidden\"\n    :class=\"getClasses(column)\"\n    >\n\n    <slot\n        name=\"column-filter\"\n        :column=\"column\"\n        :updateFilters=\"updateSlotFilter\"\n    >\n\n      <div\n        v-if=\"isFilterable(column)\">\n        <input v-if=\"!isDropdown(column)\"\n          :name=\"getName(column)\"\n          type=\"text\"\n          class=\"vgt-input\"\n          :placeholder=\"getPlaceholder(column)\"\n          :value=\"columnFilters[fieldKey(column.field)]\"\n          @keyup.enter=\"updateFiltersOnEnter(column, $event.target.value)\"\n          @input=\"updateFiltersOnKeyup(column, $event.target.value)\" />\n\n        <!-- options are a list of primitives -->\n        <select v-if=\"isDropdownArray(column)\"\n          :name=\"getName(column)\"\n          class=\"vgt-select\"\n          :value=\"columnFilters[fieldKey(column.field)]\"\n          @change=\"updateFiltersImmediately(column.field, $event.target.value)\">\n            <option value=\"\" key=\"-1\">{{ getPlaceholder(column) }}</option>\n            <option\n              v-for=\"(option, i) in column.filterOptions.filterDropdownItems\"\n              :key=\"i\"\n              :value=\"option\">\n              {{ option }}\n            </option>\n        </select>\n\n        <!-- options are a list of objects with text and value -->\n        <select v-if=\"isDropdownObjects(column)\"\n          :name=\"getName(column)\"\n          class=\"vgt-select\"\n          :value=\"columnFilters[fieldKey(column.field)]\"\n          @change=\"updateFiltersImmediately(column.field, $event.target.value)\">\n          <option value=\"\" key=\"-1\">{{ getPlaceholder(column) }}</option>\n          <option\n            v-for=\"(option, i) in column.filterOptions.filterDropdownItems\"\n            :key=\"i\"\n            :value=\"option.value\">{{ option.text }}</option>\n        </select>\n\n      </div>\n    </slot>\n  </th>\n</tr>\n</template>\n\n<script>\n\nexport default {\n  name: 'VgtFilterRow',\n  props: [\n    'lineNumbers',\n    'columns',\n    'typedColumns',\n    'globalSearchEnabled',\n    'selectable',\n    'mode',\n  ],\n  watch: {\n    columns: {\n      handler(newValue, oldValue) {\n        this.populateInitialFilters();\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n  data() {\n    return {\n      columnFilters: {},\n      timer: null,\n    };\n  },\n  computed: {\n\n    // to create a filter row, we need to\n    // make sure that there is atleast 1 column\n    // that requires filtering\n    hasFilterRow() {\n      // if (this.mode === 'remote' || !this.globalSearchEnabled) {\n      for (let i = 0; i < this.columns.length; i++) {\n        const col = this.columns[i];\n        if (col.filterOptions && col.filterOptions.enabled) {\n          return true;\n        }\n      }\n      // }\n      return false;\n    },\n  },\n  methods: {\n\n    fieldKey(field) {\n      if (typeof(field) === 'function' && field.name) {\n        return field.name;\n      }\n      return field;\n    },\n\n    reset(emitEvent = false) {\n      this.columnFilters = {};\n\n      if (emitEvent) {\n        this.$emit('filter-changed', this.columnFilters);\n      }\n    },\n\n    isFilterable(column) {\n      return column.filterOptions\n        && column.filterOptions.enabled;\n    },\n\n    isDropdown(column) {\n      return this.isFilterable(column)\n        && column.filterOptions.filterDropdownItems\n        && column.filterOptions.filterDropdownItems.length;\n    },\n\n    isDropdownObjects(column) {\n      return this.isDropdown(column)\n        && typeof column.filterOptions.filterDropdownItems[0] === 'object';\n    },\n\n    isDropdownArray(column) {\n      return this.isDropdown(column)\n        && typeof column.filterOptions.filterDropdownItems[0] !== 'object';\n    },\n\n    getClasses(column) {\n      const firstClass = 'filter-th';\n      return (column.filterOptions && column.filterOptions.styleClass) ? [firstClass, ...column.filterOptions.styleClass.split(' ')].join(' ') : firstClass;\n    },\n\n    // get column's defined placeholder or default one\n    getPlaceholder(column) {\n      const placeholder = (this.isFilterable(column) && column.filterOptions.placeholder) || `Filter ${column.label}`;\n      return placeholder;\n    },\n\n    getName(column) {\n      return `vgt-${this.fieldKey(column.field)}`;\n    },\n\n    updateFiltersOnEnter(column, value) {\n      if (this.timer) clearTimeout(this.timer);\n      this.updateFiltersImmediately(column.field, value);\n    },\n\n    updateFiltersOnKeyup(column, value) {\n      // if the trigger is enter, we don't filter on keyup\n      if (column.filterOptions.trigger === 'enter') return;\n      this.updateFilters(column, value);\n    },\n\n    updateSlotFilter(column, value) {\n      let fieldToFilter = column.filterOptions.slotFilterField || column.field;\n      if (typeof column.filterOptions.formatValue === 'function') {\n        value = column.filterOptions.formatValue(value);\n      }\n      this.updateFiltersImmediately(fieldToFilter, value);\n    },\n\n    // since vue doesn't detect property addition and deletion, we\n    // need to create helper function to set property etc\n    updateFilters(column, value) {\n      if (this.timer) clearTimeout(this.timer);\n      this.timer = setTimeout(() => {\n        this.updateFiltersImmediately(column.field, value);\n      }, 400);\n    },\n\n    updateFiltersImmediately(field, value) {\n      this.$set(this.columnFilters, this.fieldKey(field), value);\n      this.$emit('filter-changed', this.columnFilters);\n    },\n\n    populateInitialFilters() {\n      for (let i = 0; i < this.columns.length; i++) {\n        const col = this.columns[i];\n        // lets see if there are initial\n        // filters supplied by user\n        if (this.isFilterable(col)\n          && typeof col.filterOptions.filterValue !== 'undefined'\n          && col.filterOptions.filterValue !== null) {\n          this.$set(this.columnFilters, this.fieldKey(col.field), col.filterOptions.filterValue);\n          // this.updateFilters(col, col.filterOptions.filterValue);\n          // this.$set(col.filterOptions, 'filterValue', undefined);\n        }\n      }\n      //* lets emit event once all filters are set\n      this.$emit('filter-changed', this.columnFilters);\n    },\n  },\n};\n</script>\n\n<style scoped>\n\n</style>\n","<template>\n<tr>\n  <th\n    v-if=\"headerRow.mode === 'span'\"\n    class=\"vgt-left-align vgt-row-header\"\n    :colspan=\"fullColspan\"\n    >\n    <template v-if=\"selectAllByGroup\">\n      <slot name=\"table-header-group-select\"\n        :columns=\"columns\"\n        :row=\"headerRow\"\n      >\n        <input\n          type=\"checkbox\"\n          :checked=\"allSelected\"\n          @change=\"toggleSelectGroup($event)\" />\n      </slot>\n    </template>\n    <span @click=\"collapsable ? $emit('vgtExpand', !headerRow.vgtIsExpanded) : () => {}\">\n      <span v-if=\"collapsable\" class=\"triangle\" :class=\"{ 'expand': headerRow.vgtIsExpanded }\"></span>\n        <slot\n        :row=\"headerRow\"\n        name=\"table-header-row\">\n        <span v-if=\"headerRow.html\" v-html=\"headerRow.label\">\n        </span>\n        <span v-else>\n          {{ headerRow.label }}\n        </span>\n      </slot>\n    </span>\n  </th>\n  <!-- if the mode is not span, we display every column -->\n  <th\n    class=\"vgt-row-header\"\n    v-if=\"headerRow.mode !== 'span' && lineNumbers\"></th>\n  <th\n    class=\"vgt-row-header\"\n    v-if=\"headerRow.mode !== 'span' && selectable\">\n    <template v-if=\"selectAllByGroup\"\n    >\n      <slot name=\"table-header-group-select\"\n        :columns=\"columns\"\n        :row=\"headerRow\"\n      >\n        <input\n          type=\"checkbox\"\n          :checked=\"allSelected\"\n          @change=\"toggleSelectGroup($event)\" />\n      </slot>\n    </template>\n  </th>\n  <th\n    v-if=\"headerRow.mode !== 'span' && !column.hidden\"\n    v-for=\"(column, i) in columns\"\n    :key=\"i\"\n    class=\"vgt-row-header\"\n    :class=\"getClasses(i, 'td')\"\n    @click=\"columnCollapsable(i) ? $emit('vgtExpand', !headerRow.vgtIsExpanded) : () => {}\">\n    <span v-if=\"columnCollapsable(i)\" class=\"triangle\" :class=\"{ 'expand': headerRow.vgtIsExpanded }\"></span>\n    <slot\n      :row=\"headerRow\"\n      :column=\"column\"\n      :formattedRow=\"formattedRow(headerRow, true)\"\n      name=\"table-header-row\">\n      <span v-if=\"!column.html\">\n        {{ collectFormatted(headerRow, column, true) }}\n      </span>\n      <span v-if=\"column.html\" v-html=\"collectFormatted(headerRow, column, true)\">\n      </span>\n    </slot>\n  </th>\n</tr>\n</template>\n\n<script>\nexport default {\n  name: 'VgtHeaderRow',\n  props: {\n    headerRow: {\n      type: Object,\n    },\n    columns: {\n      type: Array,\n    },\n    lineNumbers: {\n      type: Boolean,\n    },\n    selectable: {\n      type: Boolean,\n    },\n    selectAllByGroup: {\n      type: Boolean\n    },\n    collapsable: {\n      type: [Boolean, Number],\n      default: false,\n    },\n    collectFormatted: {\n      type: Function,\n    },\n    formattedRow: {\n      type: Function,\n    },\n    getClasses: {\n      type: Function,\n    },\n    fullColspan: {\n      type: Number,\n    },\n    groupIndex: {\n      type: Number\n    },\n  },\n  data() {\n    return {\n    };\n  },\n  computed: {\n    allSelected() {\n      const { headerRow, groupChildObject } = this;\n      return headerRow.children.filter((row) => row.vgtSelected).length === headerRow.children.length;\n    }\n  },\n  methods: {\n    columnCollapsable(currentIndex) {\n      if (this.collapsable === true) {\n        return currentIndex === 0;\n      }\n      return currentIndex === this.collapsable;\n    },\n    toggleSelectGroup(event) {\n      this.$emit('on-select-group-change', {\n        groupIndex: this.groupIndex, checked: event.target.checked\n      });\n    }\n  },\n\n  mounted() {\n  },\n  components: {\n  },\n};\n</script>\n\n<style lang=\"scss\">\n\n</style>\n","import { format, parse, isValid, compareAsc } from 'date-fns';\nimport def from './default';\n\nconst date = Object.assign({}, def);\n\ndate.isRight = true;\n\ndate.compare = function (x, y, column) {\n  function cook(d) {\n    if (column && column.dateInputFormat) {\n      return parse(`${d}`, `${column.dateInputFormat}`, new Date());\n    }\n    return d;\n  }\n  x = cook(x);\n  y = cook(y);\n  if (!isValid(x)) {\n    return -1;\n  }\n  if (!isValid(y)) {\n    return 1;\n  }\n  return compareAsc(x, y);\n};\n\ndate.format = function (v, column) {\n  if (v === undefined || v === null) return '';\n  // convert to date\n  const date = parse(v, column.dateInputFormat, new Date());\n  if (isValid(date)) {\n    return format(date, column.dateOutputFormat);\n  }\n  console.error(`Not a valid date: \"${v}\"`);\n  return null;\n};\n\nexport default date;\n","import def from './default';\n\nconst number = Object.assign({}, def);\n\nnumber.isRight = true;\n\nnumber.filterPredicate = function (rowval, filter) {\n  return number.compare(rowval, filter) === 0;\n};\n\n\nnumber.compare = function (x, y) {\n  function cook(d) {\n    // if d is null or undefined we give it the smallest\n    // possible value\n    if (d === undefined || d === null) return -Infinity;\n    return d.indexOf('.') >= 0 ? parseFloat(d) : parseInt(d, 10);\n  }\n\n  x = typeof x === 'number' ? x : cook(x);\n  y = typeof y === 'number' ? y : cook(y);\n  if (x < y) return -1;\n  if (x > y) return 1;\n  return 0;\n};\n\nexport default number;\n","import number from './number';\n\nconst decimal = Object.assign({}, number);\n\ndecimal.format = function (v) {\n  if (v === undefined || v === null) return '';\n  return parseFloat(Math.round(v * 100) / 100).toFixed(2);\n};\n\nexport default decimal;\n","import number from './number';\n\nconst percentage = Object.assign({}, number);\n\npercentage.format = function (v) {\n  if (v === undefined || v === null) return '';\n  return `${parseFloat(v * 100).toFixed(2)}%`;\n};\n\nexport default percentage;\n","import def from './default';\n\nconst boolean = Object.assign({}, def);\n\nboolean.isRight = true;\n\nboolean.filterPredicate = function (rowval, filter) {\n  return boolean.compare(rowval, filter) === 0;\n};\n\n\nboolean.compare = function (x, y) {\n  function cook(d) {\n    if (typeof d === 'boolean') return d ? 1 : 0;\n    if (typeof d === 'string') return d === 'true' ? 1 : 0;\n    return -Infinity;\n  }\n\n  x = cook(x);\n  y = cook(y);\n  if (x < y) return -1;\n  if (x > y) return 1;\n  return 0;\n};\n\nexport default boolean;\n","<template>\n  <div :class=\"wrapStyleClasses\">\n    <div v-if=\"isLoading\" class=\"vgt-loading vgt-center-align\">\n      <slot name=\"loadingContent\">\n        <span class=\"vgt-loading__content\">\n          Loading...\n        </span>\n      </slot>\n    </div>\n    <div class=\"vgt-inner-wrap\" :class=\"{ 'is-loading': isLoading }\">\n      <slot\n        v-if=\"paginate && paginateOnTop\"\n        name=\"pagination-top\"\n        :pageChanged=\"pageChanged\"\n        :perPageChanged=\"perPageChanged\"\n        :total=\"totalRows || totalRowCount\"\n      >\n        <vgt-pagination\n          ref=\"paginationTop\"\n          @page-changed=\"pageChanged\"\n          @per-page-changed=\"perPageChanged\"\n          :perPage=\"perPage\"\n          :rtl=\"rtl\"\n          :total=\"totalRows || totalRowCount\"\n          :mode=\"paginationMode\"\n          :jumpFirstOrLast=\"paginationOptions.jumpFirstOrLast\"\n          :firstText=\"firstText\"\n          :lastText=\"lastText\"\n          :nextText=\"nextText\"\n          :prevText=\"prevText\"\n          :rowsPerPageText=\"rowsPerPageText\"\n          :perPageDropdownEnabled=\"paginationOptions.perPageDropdownEnabled\"\n          :customRowsPerPageDropdown=\"customRowsPerPageDropdown\"\n          :paginateDropdownAllowAll=\"paginateDropdownAllowAll\"\n          :ofText=\"ofText\"\n          :pageText=\"pageText\"\n          :allText=\"allText\"\n          :info-fn=\"paginationInfoFn\"\n        ></vgt-pagination>\n      </slot>\n      <vgt-global-search\n        @on-keyup=\"searchTableOnKeyUp\"\n        @on-enter=\"searchTableOnEnter\"\n        v-model=\"globalSearchTerm\"\n        :search-enabled=\"searchEnabled && externalSearchQuery == null\"\n        :global-search-placeholder=\"searchPlaceholder\"\n      >\n        <template slot=\"internal-table-actions\">\n          <slot name=\"table-actions\"> </slot>\n        </template>\n      </vgt-global-search>\n      <div\n        v-if=\"selectedRowCount && !disableSelectInfo\"\n        class=\"vgt-selection-info-row clearfix\"\n        :class=\"selectionInfoClass\"\n      >\n        {{ selectionInfo }}\n        <a href=\"\" @click.prevent=\"unselectAllInternal(true)\">\n          {{ clearSelectionText }}\n        </a>\n        <div class=\"vgt-selection-info-row__actions vgt-pull-right\">\n          <slot name=\"selected-row-actions\"> </slot>\n        </div>\n      </div>\n      <div class=\"vgt-fixed-header\">\n        <table id=\"vgt-table\" v-if=\"fixedHeader\" :class=\"tableStyleClasses\">\n          <colgroup>\n            <col\n              v-for=\"(column, index) in columns\"\n              :key=\"index\"\n              :id=\"`col-${index}`\"\n            />\n          </colgroup>\n          <!-- Table header -->\n          <thead\n            is=\"vgt-table-header\"\n            ref=\"table-header-secondary\"\n            @on-toggle-select-all=\"toggleSelectAll\"\n            @on-sort-change=\"changeSort\"\n            @filter-changed=\"filterRows\"\n            :columns=\"columns\"\n            :line-numbers=\"lineNumbers\"\n            :selectable=\"selectable\"\n            :all-selected=\"allSelected\"\n            :all-selected-indeterminate=\"allSelectedIndeterminate\"\n            :mode=\"mode\"\n            :sortable=\"sortable\"\n            :multiple-column-sort=\"multipleColumnSort\"\n            :typed-columns=\"typedColumns\"\n            :getClasses=\"getClasses\"\n            :searchEnabled=\"searchEnabled\"\n            :paginated=\"paginated\"\n            :table-ref=\"$refs.table\"\n          >\n            <template slot=\"table-column\" slot-scope=\"props\">\n              <slot name=\"table-column\" :column=\"props.column\">\n                <span>{{ props.column.label }}</span>\n              </slot>\n            </template>\n            <template slot=\"column-filter\" slot-scope=\"props\">\n              <slot\n                name=\"column-filter\"\n                :column=\"props.column\"\n                :updateFilters=\"props.updateFilters\"\n              ></slot>\n            </template>\n          </thead>\n        </table>\n      </div>\n      <div :class=\"{ 'vgt-responsive': responsive }\" :style=\"wrapperStyles\">\n        <table id=\"vgt-table\" ref=\"table\" :class=\"tableStyles\">\n          <colgroup>\n            <col\n              v-for=\"(column, index) in columns\"\n              :key=\"index\"\n              :id=\"`col-${index}`\"\n            />\n          </colgroup>\n          <!-- Table header -->\n          <thead\n            is=\"vgt-table-header\"\n            ref=\"table-header-primary\"\n            @on-toggle-select-all=\"toggleSelectAll\"\n            @on-sort-change=\"changeSort\"\n            @filter-changed=\"filterRows\"\n            :columns=\"columns\"\n            :line-numbers=\"lineNumbers\"\n            :selectable=\"selectable\"\n            :all-selected=\"allSelected\"\n            :all-selected-indeterminate=\"allSelectedIndeterminate\"\n            :mode=\"mode\"\n            :sortable=\"sortable\"\n            :multiple-column-sort=\"multipleColumnSort\"\n            :typed-columns=\"typedColumns\"\n            :getClasses=\"getClasses\"\n            :searchEnabled=\"searchEnabled\"\n          >\n            <template slot=\"table-column\" slot-scope=\"props\">\n              <slot name=\"table-column\" :column=\"props.column\">\n                <span>{{ props.column.label }}</span>\n              </slot>\n            </template>\n            <template slot=\"column-filter\" slot-scope=\"props\">\n              <slot\n                name=\"column-filter\"\n                :column=\"props.column\"\n                :updateFilters=\"props.updateFilters\"\n              ></slot>\n            </template>\n          </thead>\n\n          <!-- Table body starts here -->\n          <tbody v-for=\"(headerRow, hIndex) in paginated\" :key=\"hIndex\">\n            <!-- if group row header is at the top -->\n            <vgt-header-row\n              v-if=\"groupHeaderOnTop\"\n              @vgtExpand=\"toggleExpand(headerRow[rowKeyField])\"\n              :header-row=\"headerRow\"\n              :columns=\"columns\"\n              :line-numbers=\"lineNumbers\"\n              :selectable=\"selectable\"\n              :select-all-by-group=\"selectAllByGroup\"\n              :collapsable=\"groupOptions.collapsable\"\n              :collect-formatted=\"collectFormatted\"\n              :formatted-row=\"formattedRow\"\n              :class=\"getRowStyleClass(headerRow)\"\n              :get-classes=\"getClasses\"\n              :full-colspan=\"fullColspan\"\n              :groupIndex=\"hIndex\"\n              @on-select-group-change=\"toggleSelectGroup($event, headerRow)\"\n            >\n              <template\n                v-if=\"hasHeaderRowTemplate\"\n                slot=\"table-header-row\"\n                slot-scope=\"props\"\n              >\n                <slot\n                  name=\"table-header-row\"\n                  :column=\"props.column\"\n                  :formattedRow=\"props.formattedRow\"\n                  :row=\"props.row\"\n                >\n                </slot>\n              </template>\n            </vgt-header-row>\n            <!-- normal rows here. we loop over all rows -->\n            <tr\n              v-if=\"groupOptions.collapsable ? headerRow.vgtIsExpanded : true\"\n              v-for=\"(row, index) in headerRow.children\"\n              :key=\"row.originalIndex\"\n              :class=\"getRowStyleClass(row)\"\n              @mouseenter=\"onMouseenter(row, index)\"\n              @mouseleave=\"onMouseleave(row, index)\"\n              @dblclick=\"onRowDoubleClicked(row, index, $event)\"\n              @click=\"onRowClicked(row, index, $event)\"\n              @auxclick=\"onRowAuxClicked(row, index, $event)\"\n            >\n              <th v-if=\"lineNumbers\" class=\"line-numbers\">\n                {{ getCurrentIndex(row.originalIndex) }}\n              </th>\n              <th\n                v-if=\"selectable\"\n                @click.stop=\"onCheckboxClicked(row, index, $event)\"\n                class=\"vgt-checkbox-col\"\n              >\n                <input\n                  type=\"checkbox\"\n                  :disabled=\"row.vgtDisabled\"\n                  :checked=\"row.vgtSelected\"\n                />\n              </th>\n              <td\n                @click=\"onCellClicked(row, column, index, $event)\"\n                v-for=\"(column, i) in columns\"\n                :key=\"i\"\n                :class=\"getClasses(i, 'td', row)\"\n                v-if=\"!column.hidden && column.field\"\n                v-bind:data-label=\"compactMode ? column.label : undefined\"\n              >\n                <slot\n                  name=\"table-row\"\n                  :row=\"row\"\n                  :column=\"column\"\n                  :formattedRow=\"formattedRow(row)\"\n                  :index=\"index\"\n                >\n                  <span v-if=\"!column.html\">\n                    {{ collectFormatted(row, column) }}\n                  </span>\n                  <span v-else v-html=\"collect(row, column.field)\"> </span>\n                </slot>\n              </td>\n            </tr>\n            <!-- if group row header is at the bottom -->\n            <vgt-header-row\n              v-if=\"groupHeaderOnBottom\"\n              :header-row=\"headerRow\"\n              :columns=\"columns\"\n              :line-numbers=\"lineNumbers\"\n              :selectable=\"selectable\"\n              :select-all-by-group=\"selectAllByGroup\"\n              :collect-formatted=\"collectFormatted\"\n              :formatted-row=\"formattedRow\"\n              :get-classes=\"getClasses\"\n              :full-colspan=\"fullColspan\"\n              :groupIndex=\"index\"\n              @on-select-group-change=\"toggleSelectGroup($event, headerRow)\"\n            >\n              <template\n                v-if=\"hasHeaderRowTemplate\"\n                slot=\"table-header-row\"\n                slot-scope=\"props\"\n              >\n                <slot\n                  name=\"table-header-row\"\n                  :column=\"props.column\"\n                  :formattedRow=\"props.formattedRow\"\n                  :row=\"props.row\"\n                >\n                </slot>\n              </template>\n            </vgt-header-row>\n          </tbody>\n\n          <tbody v-if=\"showEmptySlot\">\n            <tr>\n              <td :colspan=\"fullColspan\">\n                <slot name=\"emptystate\">\n                  <div class=\"vgt-center-align vgt-text-disabled\">\n                    No data for table\n                  </div>\n                </slot>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <div v-if=\"hasFooterSlot\" class=\"vgt-wrap__actions-footer\">\n        <slot name=\"table-actions-bottom\"> </slot>\n      </div>\n      <slot\n        v-if=\"paginate && paginateOnBottom\"\n        name=\"pagination-bottom\"\n        :pageChanged=\"pageChanged\"\n        :perPageChanged=\"perPageChanged\"\n        :total=\"totalRows || totalRowCount\"\n      >\n        <vgt-pagination\n          ref=\"paginationBottom\"\n          @page-changed=\"pageChanged\"\n          @per-page-changed=\"perPageChanged\"\n          :perPage=\"perPage\"\n          :rtl=\"rtl\"\n          :total=\"totalRows || totalRowCount\"\n          :mode=\"paginationMode\"\n          :jumpFirstOrLast=\"paginationOptions.jumpFirstOrLast\"\n          :firstText=\"firstText\"\n          :lastText=\"lastText\"\n          :nextText=\"nextText\"\n          :prevText=\"prevText\"\n          :rowsPerPageText=\"rowsPerPageText\"\n          :perPageDropdownEnabled=\"paginationOptions.perPageDropdownEnabled\"\n          :customRowsPerPageDropdown=\"customRowsPerPageDropdown\"\n          :paginateDropdownAllowAll=\"paginateDropdownAllowAll\"\n          :ofText=\"ofText\"\n          :pageText=\"pageText\"\n          :allText=\"allText\"\n          :info-fn=\"paginationInfoFn\"\n        ></vgt-pagination>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { DEFAULT_SORT_TYPE, SORT_TYPES } from \"./utils/constants\";\nimport isEqual from \"lodash.isequal\";\nimport defaultType from \"./types/default\";\nimport VgtPagination from \"./pagination/VgtPagination.vue\";\nimport VgtGlobalSearch from \"./VgtGlobalSearch.vue\";\nimport VgtTableHeader from \"./VgtTableHeader.vue\";\nimport VgtHeaderRow from \"./VgtHeaderRow.vue\";\n\n// here we load each data type module.\nimport * as CoreDataTypes from \"./types/index\";\n\nconst dataTypes = {};\nconst coreDataTypes = CoreDataTypes.default;\nObject.keys(coreDataTypes).forEach(key => {\n  const compName = key.replace(/^\\.\\//, \"\").replace(/\\.js/, \"\");\n  dataTypes[compName] = coreDataTypes[key].default;\n});\n\nexport default {\n  name: \"vue-good-table\",\n  props: {\n    isLoading: { default: null, type: Boolean },\n    maxHeight: { default: null, type: String },\n    fixedHeader: Boolean,\n    theme: { default: \"\" },\n    mode: { default: \"local\" }, // could be remote\n    totalRows: {}, // required if mode = 'remote'\n    styleClass: { default: \"vgt-table bordered\" },\n    columns: {},\n    rows: {},\n    lineNumbers: Boolean,\n    responsive: { default: true, type: Boolean },\n    rtl: Boolean,\n    rowStyleClass: { default: null, type: [Function, String] },\n    compactMode: Boolean,\n    // keep selected value even on searching\n    keepSelectedOnSearch: { default: true, type: Boolean },\n    // update selected data based on search and columns filter\n    // when set to true it will keep selected value based on available data (will trigger on-selected-rows-change)\n    // else will keep selected value even when available data is changed (will not trigger on-selected-rows-change)\n    updatedSelectedOnSearch: { default: true, type: Boolean },\n\n    groupOptions: {\n      default() {\n        return {\n          enabled: false,\n          collapsable: false,\n          rowKey: null\n        };\n      }\n    },\n\n    selectOptions: {\n      default() {\n        return {\n          enabled: false,\n          selectionInfoClass: \"\",\n          selectionText: \"rows selected\",\n          clearSelectionText: \"clear\",\n          disableSelectInfo: false,\n          selectAllByGroup: false\n        };\n      }\n    },\n\n    // sort\n    sortOptions: {\n      default() {\n        return {\n          enabled: true,\n          multipleColumns: true,\n          initialSortBy: {}\n        };\n      }\n    },\n\n    // pagination\n    paginationOptions: {\n      default() {\n        return {\n          enabled: false,\n          position: \"bottom\",\n          perPage: 10,\n          perPageDropdown: null,\n          perPageDropdownEnabled: true,\n          position: \"bottom\",\n          dropdownAllowAll: true,\n          mode: \"records\", // or pages\n          infoFn: null,\n          jumpFirstOrLast: false\n        };\n      }\n    },\n\n    searchOptions: {\n      default() {\n        return {\n          enabled: false,\n          trigger: null,\n          externalQuery: null,\n          searchFn: null,\n          placeholder: \"Search Table\"\n        };\n      }\n    }\n  },\n\n  data: () => ({\n    // loading state for remote mode\n    tableLoading: false,\n\n    // text options\n    firstText: \"First\",\n    lastText: \"Last\",\n    nextText: \"Next\",\n    prevText: \"Previous\",\n    rowsPerPageText: \"Rows per page\",\n    ofText: \"of\",\n    allText: \"All\",\n    pageText: \"page\",\n\n    // internal select options\n    selectable: false,\n    selectOnCheckboxOnly: false,\n    selectAllByPage: true,\n    disableSelectInfo: false,\n    selectionInfoClass: \"\",\n    selectionText: \"rows selected\",\n    clearSelectionText: \"clear\",\n\n    // keys for rows that are currently expanded\n    maintainExpanded: true,\n    expandedRowKeys: new Set(),\n\n    // internal sort options\n    sortable: true,\n    defaultSortBy: null,\n    multipleColumnSort: true,\n\n    // internal search options\n    searchEnabled: false,\n    searchTrigger: null,\n    externalSearchQuery: null,\n    searchFn: null,\n    searchPlaceholder: \"Search Table\",\n    searchSkipDiacritics: false,\n\n    // 2024-04-06: add rows originalIndex as selected state\n    selectedRowIndex: [],\n\n    // internal pagination options\n    perPage: null,\n    paginate: false,\n    paginateOnTop: false,\n    paginateOnBottom: true,\n    customRowsPerPageDropdown: [],\n    paginateDropdownAllowAll: true,\n    paginationMode: \"records\",\n    paginationInfoFn: null,\n\n    currentPage: 1,\n    currentPerPage: 10,\n    sorts: [],\n    globalSearchTerm: \"\",\n    filteredRows: [],\n    columnFilters: {},\n    forceSearch: false,\n    sortChanged: false,\n    dataTypes: dataTypes || {}\n  }),\n\n  watch: {\n    rows: {\n      handler() {\n        this.$emit(\"update:isLoading\", false);\n        this.filterRows(this.columnFilters, false);\n      },\n      deep: true,\n      immediate: true\n    },\n\n    selectOptions: {\n      handler() {\n        this.initializeSelect();\n      },\n      deep: true,\n      immediate: true\n    },\n\n    paginationOptions: {\n      handler(newValue, oldValue) {\n        if (!isEqual(newValue, oldValue)) {\n          this.initializePagination();\n        }\n      },\n      deep: true,\n      immediate: true\n    },\n\n    searchOptions: {\n      handler() {\n        if (\n          this.searchOptions.externalQuery !== undefined &&\n          this.searchOptions.externalQuery !== this.searchTerm\n        ) {\n          //* we need to set searchTerm to externalQuery first.\n          this.externalSearchQuery = this.searchOptions.externalQuery;\n          this.handleSearch();\n        }\n        this.initializeSearch();\n      },\n      deep: true,\n      immediate: true\n    },\n\n    sortOptions: {\n      handler(newValue, oldValue) {\n        if (!isEqual(newValue, oldValue)) {\n          this.initializeSort();\n        }\n      },\n      deep: true\n    },\n\n    selectedRows(newValue, oldValue) {\n      if (!isEqual(newValue, oldValue)) {\n        this.$emit(\"on-selected-rows-change\", {\n          selectedRows: this.selectedRows\n        });\n      }\n    }\n  },\n\n  computed: {\n    tableStyles() {\n      if (this.compactMode) return this.tableStyleClasses + \"vgt-compact\";\n      else return this.tableStyleClasses;\n    },\n    hasFooterSlot() {\n      return !!this.$slots[\"table-actions-bottom\"];\n    },\n    wrapperStyles() {\n      return {\n        overflow: \"scroll-y\",\n        maxHeight: this.maxHeight ? this.maxHeight : \"auto\"\n      };\n    },\n\n    rowKeyField() {\n      return this.groupOptions.rowKey || \"vgt_header_id\";\n    },\n\n    hasHeaderRowTemplate() {\n      return (\n        !!this.$slots[\"table-header-row\"] ||\n        !!this.$scopedSlots[\"table-header-row\"]\n      );\n    },\n\n    showEmptySlot() {\n      if (!this.paginated.length) return true;\n\n      if (\n        this.paginated[0].label === \"no groups\" &&\n        !this.paginated[0].children.length\n      ) {\n        return true;\n      }\n\n      return false;\n    },\n\n    allSelected() {\n      return (\n        this.selectedRowCount > 0 &&\n        ((this.selectAllByPage &&\n          this.selectedPageRowsCount === this.totalPageRowCount) ||\n          (!this.selectAllByPage &&\n            this.selectedRowCount === this.totalRowCount))\n      );\n    },\n\n    allSelectedIndeterminate() {\n      return (\n        !this.allSelected &&\n        ((this.selectAllByPage && this.selectedPageRowsCount > 0) ||\n          (!this.selectAllByPage && this.selectedRowCount > 0))\n      );\n    },\n\n    selectionInfo() {\n      return `${this.selectedRowCount} ${this.selectionText}`;\n    },\n\n    selectedRowCount() {\n      return this.selectedRows.length;\n    },\n\n    selectedPageRowsCount() {\n      return this.selectedPageRows.length;\n    },\n\n    selectedPageRows() {\n      const selectedRows = [];\n      this.paginated.forEach(headerRow => {\n        headerRow.children.forEach(row => {\n          if (row.vgtSelected) {\n            selectedRows.push(row);\n          }\n        });\n      });\n      return selectedRows;\n    },\n\n    selectedRows() {\n      const selectedRows = [];\n      let rows = this.keepSelectedOnSearch ? this.filteredRows : this.processedRows;\n\n      // check on column filters (by check length of originalRows vs rows)\n      // if not equal, it mean has column filtering\n      // then get data from original rows and set vgtSelected manually based on selectedRowIndex\n      if (rows[0]?.children.length !== this.originalRows[0]?.children.length) {\n        rows = this.originalRows;\n\n        // re-set selected, disabled because has been called on originalRows\n        // rows.forEach(headerRow => {\n        //   headerRow.children.forEach(row => {\n        //     if (this.selectedRowIndex.includes(row.originalIndex)) {\n        //       this.$set(row, \"vgtSelected\", true);\n        //     } else {\n        //       this.$set(row, \"vgtSelected\", false);\n        //     }\n        //   });\n        // });\n      }\n\n      rows.forEach(headerRow => {\n        headerRow.children.forEach(row => {\n          if (row.vgtSelected) {\n            selectedRows.push(row);\n          }\n        });\n      });\n      return selectedRows.sort((r1, r2) => r1.originalIndex - r2.originalIndex);\n    },\n\n    fullColspan() {\n      let fullColspan = 0;\n      for (let i = 0; i < this.columns.length; i += 1) {\n        if (!this.columns[i].hidden) {\n          fullColspan += 1;\n        }\n      }\n      if (this.lineNumbers) fullColspan++;\n      if (this.selectable) fullColspan++;\n      return fullColspan;\n    },\n    groupHeaderOnTop() {\n      if (\n        this.groupOptions &&\n        this.groupOptions.enabled &&\n        this.groupOptions.headerPosition &&\n        this.groupOptions.headerPosition === \"bottom\"\n      ) {\n        return false;\n      }\n      if (this.groupOptions && this.groupOptions.enabled) return true;\n\n      // will only get here if groupOptions is false\n      return false;\n    },\n    groupHeaderOnBottom() {\n      if (\n        this.groupOptions &&\n        this.groupOptions.enabled &&\n        this.groupOptions.headerPosition &&\n        this.groupOptions.headerPosition === \"bottom\"\n      ) {\n        return true;\n      }\n      return false;\n    },\n    totalRowCount() {\n      const total = this.processedRows.reduce((total, headerRow) => {\n        const childrenCount = headerRow.children\n          ? headerRow.children.length\n          : 0;\n        return total + childrenCount;\n      }, 0);\n      return total;\n    },\n    totalPageRowCount() {\n      const total = this.paginated.reduce((total, headerRow) => {\n        const childrenCount = headerRow.children\n          ? headerRow.children.length\n          : 0;\n        return total + childrenCount;\n      }, 0);\n      return total;\n    },\n    wrapStyleClasses() {\n      let classes = \"vgt-wrap\";\n      if (this.rtl) classes += \" rtl\";\n      classes += ` ${this.theme}`;\n      return classes;\n    },\n    tableStyleClasses() {\n      let classes = this.styleClass;\n      classes += ` ${this.theme}`;\n      return classes;\n    },\n\n    searchTerm() {\n      return this.externalSearchQuery != null\n        ? this.externalSearchQuery\n        : this.globalSearchTerm;\n    },\n\n    //\n    globalSearchAllowed() {\n      if (\n        this.searchEnabled &&\n        !!this.globalSearchTerm &&\n        this.searchTrigger !== \"enter\"\n      ) {\n        return true;\n      }\n\n      if (this.externalSearchQuery != null && this.searchTrigger !== \"enter\") {\n        return true;\n      }\n\n      if (this.forceSearch) {\n        this.forceSearch = false;\n        return true;\n      }\n\n      return false;\n    },\n\n    // this is done everytime sortColumn\n    // or sort type changes\n    //----------------------------------------\n    processedRows() {\n      // we only process rows when mode is local\n      let computedRows = this.filteredRows;\n      if (this.mode === \"remote\") {\n        return computedRows;\n      }\n\n      // take care of the global filter here also\n      if (this.globalSearchAllowed) {\n        // here also we need to de-construct and then\n        // re-construct the rows.\n        const allRows = [];\n        this.filteredRows.forEach(headerRow => {\n          allRows.push(...headerRow.children);\n        });\n        const filteredRows = [];\n        allRows.forEach(row => {\n          for (let i = 0; i < this.columns.length; i += 1) {\n            const col = this.columns[i];\n            // if col does not have search disabled,\n            if (!col.globalSearchDisabled) {\n              // if a search function is provided,\n              // use that for searching, otherwise,\n              // use the default search behavior\n              if (this.searchFn) {\n                const foundMatch = this.searchFn(\n                  row,\n                  col,\n                  this.collectFormatted(row, col),\n                  this.searchTerm\n                );\n                if (foundMatch) {\n                  filteredRows.push(row);\n                  break; // break the loop\n                }\n              } else {\n                // comparison\n                const matched = defaultType.filterPredicate(\n                  this.collectFormatted(row, col),\n                  this.searchTerm,\n                  this.searchSkipDiacritics\n                );\n                if (matched) {\n                  filteredRows.push(row);\n                  break; // break loop\n                }\n              }\n            }\n          }\n        });\n\n        // this is where we emit on search\n        this.$emit(\"on-search\", {\n          searchTerm: this.searchTerm,\n          rowCount: filteredRows.length\n        });\n\n        // here we need to reconstruct the nested structure\n        // of rows\n        computedRows = [];\n        this.filteredRows.forEach(headerRow => {\n          const i = headerRow.vgt_header_id;\n          const children = filteredRows.filter(r => r.vgt_id === i);\n          if (children.length) {\n            const newHeaderRow = JSON.parse(JSON.stringify(headerRow));\n            newHeaderRow.children = children;\n            computedRows.push(newHeaderRow);\n          }\n        });\n      }\n      if (this.sorts.length) {\n        //* we need to sort\n        computedRows.forEach(cRows => {\n          cRows.children.sort((xRow, yRow) => {\n            //* we need to get column for each sort\n            let sortValue;\n            for (let i = 0; i < this.sorts.length; i += 1) {\n              const srt = this.sorts[i];\n\n              if (srt.type === SORT_TYPES.None) {\n                //* if no sort, we need to use the original index to sort.\n                sortValue =\n                  sortValue || xRow.originalIndex - yRow.originalIndex;\n              } else {\n                const column = this.getColumnForField(srt.field);\n                const xvalue = this.collect(xRow, srt.field);\n                const yvalue = this.collect(yRow, srt.field);\n\n                //* if a custom sort function has been provided we use that\n                const { sortFn } = column;\n                if (sortFn && typeof sortFn === \"function\") {\n                  sortValue =\n                    sortValue ||\n                    sortFn(xvalue, yvalue, column, xRow, yRow) *\n                      (srt.type === SORT_TYPES.Descending ? -1 : 1);\n                } else {\n                  //* else we use our own sort\n                  sortValue =\n                    sortValue ||\n                    column.typeDef.compare(xvalue, yvalue, column) *\n                      (srt.type === SORT_TYPES.Descending ? -1 : 1);\n                }\n              }\n            }\n            return sortValue;\n          });\n        });\n      }\n\n      // if the filtering is event based, we need to maintain filter\n      // rows\n      if (this.searchTrigger === \"enter\") {\n        this.filteredRows = computedRows;\n      }\n\n      return computedRows;\n    },\n\n    paginated() {\n      if (!this.processedRows.length) return [];\n\n      if (this.mode === \"remote\") {\n        return this.processedRows;\n      }\n\n      //* flatten the rows for paging.\n      let paginatedRows = [];\n      this.processedRows.forEach(childRows => {\n        //* only add headers when group options are enabled.\n        if (this.groupOptions.enabled) {\n          paginatedRows.push(childRows);\n        }\n        paginatedRows.push(...childRows.children);\n      });\n\n      if (this.paginate) {\n        let pageStart = (this.currentPage - 1) * this.currentPerPage;\n\n        // in case of filtering we might be on a page that is\n        // not relevant anymore\n        // also, if setting to all, current page will not be valid\n        if (pageStart >= paginatedRows.length || this.currentPerPage === -1) {\n          this.currentPage = 1;\n          pageStart = 0;\n        }\n\n        // calculate page end now\n        let pageEnd = paginatedRows.length + 1;\n\n        // if the setting is not set to 'all'\n        if (this.currentPerPage !== -1) {\n          pageEnd = this.currentPage * this.currentPerPage;\n        }\n\n        paginatedRows = paginatedRows.slice(pageStart, pageEnd);\n      }\n      // reconstruct paginated rows here\n      const reconstructedRows = [];\n      paginatedRows.forEach(flatRow => {\n        //* header row?\n        if (flatRow.vgt_header_id !== undefined) {\n          this.handleExpanded(flatRow);\n          const newHeaderRow = JSON.parse(JSON.stringify(flatRow));\n          newHeaderRow.children = [];\n          reconstructedRows.push(newHeaderRow);\n        } else {\n          //* child row\n          let hRow = reconstructedRows.find(\n            r => r.vgt_header_id === flatRow.vgt_id\n          );\n          if (!hRow) {\n            hRow = this.processedRows.find(\n              r => r.vgt_header_id === flatRow.vgt_id\n            );\n            if (hRow) {\n              hRow = JSON.parse(JSON.stringify(hRow));\n              hRow.children = [];\n              reconstructedRows.push(hRow);\n            }\n          }\n          hRow.children.push(flatRow);\n        }\n      });\n      return reconstructedRows;\n    },\n\n    originalRows() {\n      const rows =\n        this.rows && this.rows.length\n          ? JSON.parse(JSON.stringify(this.rows))\n          : [];\n      let nestedRows = [];\n      if (!this.groupOptions.enabled) {\n        nestedRows = this.handleGrouped([\n          {\n            label: \"no groups\",\n            children: rows\n          }\n        ]);\n      } else {\n        nestedRows = this.handleGrouped(rows);\n      }\n      // we need to preserve the original index of\n      // rows so lets do that\n      let index = 0;\n      nestedRows.forEach(headerRow => {\n        headerRow.children.forEach(row => {\n          row.originalIndex = index++;\n\n          // if data has been provided with selected rows but doesn't exist on selectRowIndex\n          // add originalIndex to the selectedRowIndex\n          if (row.vgtSelected && !this.selectedRowIndex.includes(row.originalIndex)) {\n            this.selectedRowIndex.push(row.originalIndex);\n          } else if (!row.vgtSelected && this.selectedRowIndex.includes(row.originalIndex)) {\n            row.vgtSelected = true\n          }\n        });\n      });\n\n      return nestedRows;\n    },\n\n    typedColumns() {\n      const columns = this.columns;\n      for (let i = 0; i < this.columns.length; i++) {\n        const column = columns[i];\n        column.typeDef = this.dataTypes[column.type] || defaultType;\n      }\n      return columns;\n    },\n\n    hasRowClickListener() {\n      return this.$listeners && this.$listeners[\"on-row-click\"];\n    }\n  },\n\n  methods: {\n    //* we need to check for expanded row state here\n    //* to maintain it when sorting/filtering\n    handleExpanded(headerRow) {\n      if (\n        this.maintainExpanded &&\n        this.expandedRowKeys.has(headerRow[this.rowKeyField])\n      ) {\n        this.$set(headerRow, \"vgtIsExpanded\", true);\n      } else {\n        this.$set(headerRow, \"vgtIsExpanded\", false);\n      }\n    },\n    toggleExpand(id) {\n      const headerRow = this.filteredRows.find(r => r[this.rowKeyField] === id);\n      if (headerRow) {\n        this.$set(headerRow, \"vgtIsExpanded\", !headerRow.vgtIsExpanded);\n      }\n      if (this.maintainExpanded && headerRow.vgtIsExpanded) {\n        this.expandedRowKeys.add(headerRow[this.rowKeyField]);\n      } else {\n        this.expandedRowKeys.delete(headerRow[this.rowKeyField]);\n      }\n    },\n\n    expandAll() {\n      this.filteredRows.forEach(row => {\n        this.$set(row, \"vgtIsExpanded\", true);\n        if (this.maintainExpanded) {\n          this.expandedRowKeys.add(row[this.rowKeyField]);\n        }\n      });\n    },\n\n    collapseAll() {\n      this.filteredRows.forEach(row => {\n        this.$set(row, \"vgtIsExpanded\", false);\n        this.expandedRowKeys.clear();\n      });\n    },\n\n    getColumnForField(field) {\n      for (let i = 0; i < this.typedColumns.length; i += 1) {\n        if (this.typedColumns[i].field === field) return this.typedColumns[i];\n      }\n    },\n\n    handleSearch() {\n      this.resetTable();\n      // for remote mode, we need to emit on-search\n      if (this.mode === \"remote\") {\n        this.$emit(\"on-search\", {\n          searchTerm: this.searchTerm\n        });\n      }\n    },\n\n    reset() {\n      this.initializeSort();\n      this.changePage(1);\n      this.$refs[\"table-header-primary\"].reset(true);\n      if (this.$refs[\"table-header-secondary\"]) {\n        this.$refs[\"table-header-secondary\"].reset(true);\n      }\n    },\n\n    emitSelectedRows() {\n      this.$emit(\"on-select-all\", {\n        selected: this.selectedRowCount === this.totalRowCount,\n        selectedRows: this.selectedRows\n      });\n    },\n\n    unselectAllInternal(forceAll) {\n      const rows =\n        this.selectAllByPage && !forceAll ? this.paginated : this.filteredRows;\n      rows.forEach((headerRow, i) => {\n        headerRow.children.forEach((row, j) => {\n          this.$set(row, \"vgtSelected\", false);\n        });\n      });\n      this.selectedRowIndex = []\n      this.emitSelectedRows();\n    },\n\n    toggleSelectAll() {\n      if (this.allSelected) {\n        this.unselectAllInternal();\n        return;\n      }\n      const rows = this.selectAllByPage ? this.paginated : this.filteredRows;\n      rows.forEach(headerRow => {\n        headerRow.children.forEach(row => {\n          this.$set(row, \"vgtSelected\", true);\n        });\n      });\n      this.emitSelectedRows();\n    },\n\n    toggleSelectGroup(event, headerRow) {\n      headerRow.children.forEach(row => {\n        this.$set(row, \"vgtSelected\", event.checked);\n      });\n    },\n\n    changePage(value) {\n      const enabled = this.paginate;\n      let { paginationBottom, paginationTop } = this.$refs;\n      if (enabled) {\n        if (this.paginateOnTop && paginationTop) {\n          paginationTop.currentPage = value;\n        }\n        if (this.paginateOnBottom && paginationBottom) {\n          paginationBottom.currentPage = value;\n        }\n        // we also need to set the currentPage\n        // for table.\n        this.currentPage = value;\n      }\n    },\n\n    pageChangedEvent() {\n      return {\n        currentPage: this.currentPage,\n        currentPerPage: this.currentPerPage,\n        total: Math.floor(this.totalRowCount / this.currentPerPage)\n      };\n    },\n\n    pageChanged(pagination) {\n      this.currentPage = pagination.currentPage;\n      if (!pagination.noEmit) {\n        const pageChangedEvent = this.pageChangedEvent();\n        pageChangedEvent.prevPage = pagination.prevPage;\n        this.$emit(\"on-page-change\", pageChangedEvent);\n        if (this.mode === \"remote\") {\n          this.$emit(\"update:isLoading\", true);\n        }\n      }\n    },\n\n    perPageChanged(pagination) {\n      this.currentPerPage = pagination.currentPerPage;\n      // ensure that both sides of pagination are in agreement\n      // this fixes changes during position = 'both'\n      let paginationPosition = this.paginationOptions.position;\n      if (\n        this.$refs.paginationTop &&\n        (paginationPosition === \"top\" || paginationPosition === \"both\")\n      ) {\n        this.$refs.paginationTop.currentPerPage = this.currentPerPage;\n      }\n      if (\n        this.$refs.paginationBottom &&\n        (paginationPosition === \"bottom\" || paginationPosition === \"both\")\n      ) {\n        this.$refs.paginationBottom.currentPerPage = this.currentPerPage;\n      }\n      //* update perPage also\n      const perPageChangedEvent = this.pageChangedEvent();\n      this.$emit(\"on-per-page-change\", perPageChangedEvent);\n      if (this.mode === \"remote\") {\n        this.$emit(\"update:isLoading\", true);\n      }\n    },\n\n    changeSort(sorts) {\n      this.sorts = sorts;\n      this.$emit(\"on-sort-change\", sorts);\n\n      // every time we change sort we need to reset to page 1\n      this.changePage(1);\n\n      // if the mode is remote, we don't need to do anything\n      // after this. just set table loading to true\n      if (this.mode === \"remote\") {\n        this.$emit(\"update:isLoading\", true);\n        return;\n      }\n      this.sortChanged = true;\n    },\n\n    // checkbox click should always do the following\n    async onCheckboxClicked(row, index, event) {\n      const originalIndex = row.originalIndex\n\n      // keep these orders\n      this.$set(row, \"vgtSelected\", !row.vgtSelected);\n\n      // add or remove into selectedRowIndex\n      if (!this.selectedRowIndex.includes(originalIndex) && row?.vgtSelected === true)\n        this.selectedRowIndex.push(originalIndex)\n\n      if (this.selectedRowIndex.includes(originalIndex) && row?.vgtSelected !== true)\n        this.selectedRowIndex = this.selectedRowIndex.filter(selectedIndex => selectedIndex !== originalIndex)\n\n      this.$emit(\"on-row-click\", {\n        row,\n        pageIndex: index,\n        selected: !!row.vgtSelected,\n        event\n      });\n    },\n\n    onRowDoubleClicked(row, index, event) {\n      this.$emit(\"on-row-dblclick\", {\n        row,\n        pageIndex: index,\n        selected: !!row.vgtSelected,\n        event\n      });\n    },\n\n    onRowClicked(row, index, event) {\n      if (this.selectable && !this.selectOnCheckboxOnly) {\n        this.$set(row, \"vgtSelected\", !row.vgtSelected);\n      }\n      this.$emit(\"on-row-click\", {\n        row,\n        pageIndex: index,\n        selected: !!row.vgtSelected,\n        event\n      });\n    },\n\n    onRowAuxClicked(row, index, event) {\n      this.$emit(\"on-row-aux-click\", {\n        row,\n        pageIndex: index,\n        selected: !!row.vgtSelected,\n        event\n      });\n    },\n\n    onCellClicked(row, column, rowIndex, event) {\n      this.$emit(\"on-cell-click\", {\n        row,\n        column,\n        rowIndex,\n        event\n      });\n    },\n\n    onMouseenter(row, index) {\n      this.$emit(\"on-row-mouseenter\", {\n        row,\n        pageIndex: index\n      });\n    },\n\n    onMouseleave(row, index) {\n      this.$emit(\"on-row-mouseleave\", {\n        row,\n        pageIndex: index\n      });\n    },\n\n    searchTableOnEnter() {\n      if (this.searchTrigger === \"enter\") {\n        this.handleSearch();\n        // we reset the filteredRows here because\n        // we want to search across everything.\n        this.filteredRows = JSON.parse(JSON.stringify(this.originalRows));\n        this.forceSearch = true;\n        this.sortChanged = true;\n      }\n    },\n\n    searchTableOnKeyUp() {\n      if (this.searchTrigger !== \"enter\") {\n        this.handleSearch();\n      }\n    },\n\n    resetTable() {\n      if (!this.keepSelectedOnSearch)\n        this.unselectAllInternal(true);\n      // every time we searchTable\n      this.changePage(1);\n    },\n\n    // field can be:\n    // 1. function (passed as a string using function.name. For example: 'bound myFunction')\n    // 2. regular property - ex: 'prop'\n    // 3. nested property path - ex: 'nested.prop'\n    collect(obj, field) {\n      // utility function to get nested property\n      function dig(obj, selector) {\n        let result = obj;\n        const splitter = selector.split(\".\");\n        for (let i = 0; i < splitter.length; i++) {\n          if (typeof result === \"undefined\" || result === null) {\n            return undefined;\n          }\n          result = result[splitter[i]];\n        }\n        return result;\n      }\n\n      if (typeof field === \"function\") return field(obj);\n      if (typeof field === \"string\") return dig(obj, field);\n      return undefined;\n    },\n\n    collectFormatted(obj, column, headerRow = false) {\n      let value;\n      if (headerRow && column.headerField) {\n        value = this.collect(obj, column.headerField);\n      } else {\n        value = this.collect(obj, column.field);\n      }\n      if (value === undefined) return \"\";\n\n      // if user has supplied custom formatter,\n      // use that here\n      if (column.formatFn && typeof column.formatFn === \"function\") {\n        return column.formatFn(value, obj);\n      }\n\n      // lets format the resultant data\n      let type = column.typeDef;\n      // this will only happen if we try to collect formatted\n      // before types have been initialized. for example: on\n      // load when external query is specified.\n      if (!type) {\n        type = this.dataTypes[column.type] || defaultType;\n      }\n\n      let result = type.format(value, column);\n      // we must have some values in compact mode\n      if (this.compactMode && (result == \"\" || result == null)) return \"-\";\n      return result;\n    },\n\n    formattedRow(row, isHeaderRow = false) {\n      const formattedRow = {};\n      for (let i = 0; i < this.typedColumns.length; i++) {\n        const col = this.typedColumns[i];\n        // what happens if field is\n        if (col.field) {\n          formattedRow[col.field] = this.collectFormatted(\n            row,\n            col,\n            isHeaderRow\n          );\n        }\n      }\n      return formattedRow;\n    },\n\n    // Get classes for the given column index & element.\n    getClasses(index, element, row) {\n      const { typeDef, [`${element}Class`]: custom } = this.typedColumns[index];\n      let { isRight } = typeDef;\n      if (this.rtl) isRight = true;\n\n      const classes = {\n        \"vgt-right-align\": isRight,\n        \"vgt-left-align\": !isRight\n      };\n\n      // for td we need to check if value is\n      // a function.\n      if (typeof custom === \"function\") {\n        classes[custom(row)] = true;\n      } else if (typeof custom === \"string\") {\n        classes[custom] = true;\n      }\n      return classes;\n    },\n\n    // method to filter rows\n    filterRows(columnFilters, fromFilter = true) {\n      // if (!this.rows.length) return;\n      // this is invoked either as a result of changing filters\n      // or as a result of modifying rows.\n      this.columnFilters = columnFilters;\n      let computedRows = JSON.parse(JSON.stringify(this.originalRows));\n      let instancesOfFiltering = false;\n\n      // do we have a filter to care about?\n      // if not we don't need to do anything\n      if (this.columnFilters && Object.keys(this.columnFilters).length) {\n        // every time we filter rows, we need to set current page\n        // to 1\n        // if the mode is remote, we only need to reset, if this is\n        // being called from filter, not when rows are changing\n        if (this.mode !== \"remote\" || fromFilter) {\n          this.changePage(1);\n        }\n        // we need to emit an event and that's that.\n        // but this only needs to be invoked if filter is changing\n        // not when row object is modified.\n        if (fromFilter) {\n          this.$emit(\"on-column-filter\", {\n            columnFilters: this.columnFilters\n          });\n        }\n\n        // if mode is remote, we don't do any filtering here.\n        if (this.mode === \"remote\") {\n          if (fromFilter) {\n            this.$emit(\"update:isLoading\", true);\n          } else {\n            // if remote filtering has already been taken care of.\n            this.filteredRows = computedRows;\n          }\n          return;\n        }\n\n        const fieldKey = field => {\n          if (typeof field === \"function\" && field.name) {\n            return field.name;\n          }\n          return field;\n        };\n\n        for (let i = 0; i < this.typedColumns.length; i++) {\n          const col = this.typedColumns[i];\n          if (this.columnFilters[fieldKey(col.field)]) {\n            instancesOfFiltering = true;\n            computedRows.forEach(headerRow => {\n              const newChildren = headerRow.children.filter(row => {\n                // If column has a custom filter, use that.\n                if (\n                  col.filterOptions &&\n                  typeof col.filterOptions.filterFn === \"function\"\n                ) {\n                  return col.filterOptions.filterFn(\n                    this.collect(row, col.field),\n                    this.columnFilters[fieldKey(col.field)]\n                  );\n                }\n\n                // Otherwise Use default filters\n                const { typeDef } = col;\n                return typeDef.filterPredicate(\n                  this.collect(row, col.field),\n                  this.columnFilters[fieldKey(col.field)],\n                  false,\n                  col.filterOptions &&\n                    typeof col.filterOptions.filterDropdownItems === \"object\"\n                );\n              });\n              // should we remove the header?\n              headerRow.children = newChildren;\n            });\n          }\n        }\n      }\n\n      if (instancesOfFiltering) {\n        this.filteredRows = computedRows.filter(\n          h => h.children && h.children.length\n        );\n      } else {\n        this.filteredRows = computedRows;\n      }\n    },\n\n    getCurrentIndex(rowId) {\n      let index = 0;\n      let found = false;\n      for (let i = 0; i < this.paginated.length; i += 1) {\n        const headerRow = this.paginated[i];\n        const { children } = headerRow;\n        if (children && children.length) {\n          for (let j = 0; j < children.length; j += 1) {\n            const c = children[j];\n            if (c.originalIndex === rowId) {\n              found = true;\n              break;\n            }\n            index += 1;\n          }\n        }\n        if (found) break;\n      }\n      return (this.currentPage - 1) * this.currentPerPage + index + 1;\n    },\n\n    getRowStyleClass(row) {\n      let classes = \"\";\n      if (this.hasRowClickListener) classes += \"clickable\";\n      let rowStyleClasses;\n      if (typeof this.rowStyleClass === \"function\") {\n        rowStyleClasses = this.rowStyleClass(row);\n      } else {\n        rowStyleClasses = this.rowStyleClass;\n      }\n      if (rowStyleClasses) {\n        classes += ` ${rowStyleClasses}`;\n      }\n      return classes;\n    },\n\n    handleGrouped(originalRows) {\n      originalRows.forEach((headerRow, i) => {\n        headerRow.vgt_header_id = i;\n        if (\n          this.groupOptions.maintainExpanded &&\n          this.expandedRowKeys.has(headerRow[this.groupOptions.rowKey])\n        ) {\n          this.$set(headerRow, \"vgtIsExpanded\", true);\n        }\n        headerRow.children.forEach(childRow => {\n          childRow.vgt_id = i;\n        });\n      });\n      return originalRows;\n    },\n\n    initializePagination() {\n      const {\n        enabled,\n        perPage,\n        position,\n        perPageDropdown,\n        perPageDropdownEnabled,\n        dropdownAllowAll,\n        firstLabel,\n        lastLabel,\n        nextLabel,\n        prevLabel,\n        rowsPerPageLabel,\n        ofLabel,\n        pageLabel,\n        allLabel,\n        setCurrentPage,\n        mode,\n        infoFn\n      } = this.paginationOptions;\n\n      if (typeof enabled === \"boolean\") {\n        this.paginate = enabled;\n      }\n\n      if (typeof perPage === \"number\") {\n        this.perPage = perPage;\n      }\n\n      if (position === \"top\") {\n        this.paginateOnTop = true; // default is false\n        this.paginateOnBottom = false; // default is true\n      } else if (position === \"both\") {\n        this.paginateOnTop = true;\n        this.paginateOnBottom = true;\n      }\n\n      if (Array.isArray(perPageDropdown) && perPageDropdown.length) {\n        this.customRowsPerPageDropdown = perPageDropdown;\n        if (!this.perPage) {\n          [this.perPage] = perPageDropdown;\n        }\n      }\n\n      if (typeof perPageDropdownEnabled === \"boolean\") {\n        this.perPageDropdownEnabled = perPageDropdownEnabled;\n      }\n\n      if (typeof dropdownAllowAll === \"boolean\") {\n        this.paginateDropdownAllowAll = dropdownAllowAll;\n      }\n\n      if (typeof mode === \"string\") {\n        this.paginationMode = mode;\n      }\n\n      if (typeof firstLabel === \"string\") {\n        this.firstText = firstLabel;\n      }\n\n      if (typeof lastLabel === \"string\") {\n        this.lastText = lastLabel;\n      }\n\n      if (typeof nextLabel === \"string\") {\n        this.nextText = nextLabel;\n      }\n\n      if (typeof prevLabel === \"string\") {\n        this.prevText = prevLabel;\n      }\n\n      if (typeof rowsPerPageLabel === \"string\") {\n        this.rowsPerPageText = rowsPerPageLabel;\n      }\n\n      if (typeof ofLabel === \"string\") {\n        this.ofText = ofLabel;\n      }\n\n      if (typeof pageLabel === \"string\") {\n        this.pageText = pageLabel;\n      }\n\n      if (typeof allLabel === \"string\") {\n        this.allText = allLabel;\n      }\n\n      if (typeof setCurrentPage === \"number\") {\n        setTimeout(() => {\n          this.changePage(setCurrentPage);\n        }, 500);\n      }\n\n      if (typeof infoFn === \"function\") {\n        this.paginationInfoFn = infoFn;\n      }\n    },\n\n    initializeSearch() {\n      const {\n        enabled,\n        trigger,\n        externalQuery,\n        searchFn,\n        placeholder,\n        skipDiacritics\n      } = this.searchOptions;\n\n      if (typeof enabled === \"boolean\") {\n        this.searchEnabled = enabled;\n      }\n\n      if (trigger === \"enter\") {\n        this.searchTrigger = trigger;\n      }\n\n      if (typeof externalQuery === \"string\") {\n        this.externalSearchQuery = externalQuery;\n      }\n\n      if (typeof searchFn === \"function\") {\n        this.searchFn = searchFn;\n      }\n\n      if (typeof placeholder === \"string\") {\n        this.searchPlaceholder = placeholder;\n      }\n\n      if (typeof skipDiacritics === \"boolean\") {\n        this.searchSkipDiacritics = skipDiacritics;\n      }\n    },\n\n    initializeSort() {\n      const { enabled, initialSortBy, multipleColumns } = this.sortOptions;\n      const initSortBy = JSON.parse(JSON.stringify(initialSortBy || {}));\n\n      if (typeof enabled === \"boolean\") {\n        this.sortable = enabled;\n      }\n\n      if (typeof multipleColumns === \"boolean\") {\n        this.multipleColumnSort = multipleColumns;\n      }\n\n      //* initialSortBy can be an array or an object\n      if (typeof initSortBy === \"object\") {\n        const ref = this.fixedHeader\n          ? this.$refs[\"table-header-secondary\"]\n          : this.$refs[\"table-header-primary\"];\n        if (Array.isArray(initSortBy)) {\n          ref.setInitialSort(initSortBy);\n        } else {\n          const hasField = Object.prototype.hasOwnProperty.call(\n            initSortBy,\n            \"field\"\n          );\n          if (hasField) ref.setInitialSort([initSortBy]);\n        }\n      }\n    },\n\n    initializeSelect() {\n      const {\n        enabled,\n        selectionInfoClass,\n        selectionText,\n        clearSelectionText,\n        selectOnCheckboxOnly,\n        selectAllByPage,\n        disableSelectInfo,\n        selectAllByGroup\n      } = this.selectOptions;\n\n      if (typeof enabled === \"boolean\") {\n        this.selectable = enabled;\n      }\n\n      if (typeof selectOnCheckboxOnly === \"boolean\") {\n        this.selectOnCheckboxOnly = selectOnCheckboxOnly;\n      }\n\n      if (typeof selectAllByPage === \"boolean\") {\n        this.selectAllByPage = selectAllByPage;\n      }\n\n      if (typeof selectAllByGroup === \"boolean\") {\n        this.selectAllByGroup = selectAllByGroup;\n      }\n\n      if (typeof disableSelectInfo === \"boolean\") {\n        this.disableSelectInfo = disableSelectInfo;\n      }\n\n      if (typeof selectionInfoClass === \"string\") {\n        this.selectionInfoClass = selectionInfoClass;\n      }\n\n      if (typeof selectionText === \"string\") {\n        this.selectionText = selectionText;\n      }\n\n      if (typeof clearSelectionText === \"string\") {\n        this.clearSelectionText = clearSelectionText;\n      }\n    }\n  },\n\n  mounted() {\n    if (this.perPage) {\n      this.currentPerPage = this.perPage;\n    }\n    this.initializeSort();\n  },\n\n  components: {\n    \"vgt-pagination\": VgtPagination,\n    \"vgt-global-search\": VgtGlobalSearch,\n    \"vgt-header-row\": VgtHeaderRow,\n    \"vgt-table-header\": VgtTableHeader\n  }\n};\n</script>\n\n<style lang=\"scss\">\n@import \"../styles/style\";\n</style>\n","import * as date from './date';\nimport * as decimal from './decimal';\nimport * as number from './number';\nimport * as percentage from './percentage';\nimport * as boolean from './boolean';\n\nexport default {\n  date,\n  decimal,\n  number,\n  percentage,\n  boolean,\n};\n","import VueGoodTable from './components/Table.vue';\n\nconst VueGoodTablePlugin = {\n  install(Vue, options) {\n    Vue.component(VueGoodTable.name, VueGoodTable);\n  },\n};\n\n// Automatic installation if Vue has been added to the global scope.\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(VueGoodTablePlugin);\n}\n\nexport default VueGoodTablePlugin;\nexport { VueGoodTable };\n"],"names":["SORT_TYPES","PAGINATION_MODES","DEFAULT_ROWS_PER_PAGE_DROPDOWN","diacritics","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","compiledDiactitics","key","ok","rval","val","regexNonASCII","diacriticless","text","search","result","len","length","searchChar","charAt","escapeRegExp","str","replace","defaultType","format","filterPredicate","rowval","filter","skipDiacritics","fromDropdown","rowValue","String","toLowerCase","searchTerm","indexOf","compare","cook","normalizeComponent","template","style","script","scopeId","isFunctionalTemplate","moduleIdentifier","shadowMode","createInjector","createInjectorSSR","createInjectorShadow","options","hook","render","staticRenderFns","_compiled","functional","_scopeId","context","this","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","call","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","originalRender","existing","beforeCreate","concat","name","props","styleClass","default","total","perPage","rtl","perPageDropdownEnabled","customRowsPerPageDropdown","paginateDropdownAllowAll","mode","jumpFirstOrLast","firstText","lastText","nextText","prevText","rowsPerPageText","ofText","pageText","allText","infoFn","data","id","getId","currentPage","prevPage","currentPerPage","rowsPerPageOptions","watch","handler","newValue","oldValue","handlePerPage","perPageChanged","immediate","computed","pagesCount","quotient","Math","floor","remainder","firstIsPossible","lastIsPossible","ceil","nextIsPossible","prevIsPossible","methods","random","Date","now","changePage","pageNumber","emit","pageChanged","firstPage","lastPage","prev","nextPage","previousPage","payload","noEmit","$emit","Array","isArray","JSON","parse","stringify","found","unshift","mounted","components","VgtPaginationPageInfo","totalRecords","type","pageInfo","firstRecordOnPage","lastRecordOnPage","min","recordInfo","first","last","infoParams","totalPage","event","value","parseInt","target","Number","isNaN","globalSearchTerm","showControlBar","searchEnabled","$slots","updateValue","entered","getColumnFirstSortType","column","firstSortType","getNextSort","currentSort","lineNumbers","Boolean","selectable","allSelected","allSelectedIndeterminate","columns","typedColumns","sortable","multipleColumnSort","getClasses","Function","tableRef","paginated","setColumnStyles","deep","checkBoxThStyle","lineNumberThStyle","columnStyles","sorts","ro","reset","$refs","toggleSelectAll","isSortableColumn","sort","shiftKey","sortArray","index","field","getIndex","push","secondarySort","currentPrimarySort","undefined","getCurrentPrimarySort","nextPrimarySort","primarySort","setInitialSort","getColumnSort","getColumnSortLong","getHeaderClasses","Object","assign","sorting sorting-desc","sorting sorting-asc","filterRows","columnFilters","getWidthStyle","dom","window","getComputedStyle","width","colStyles","skip","cell","rows","cells","minWidth","maxWidth","getColumnStyle","styleObject","cellStyle","_this","$nextTick","ResizeObserver","observe","$parent","$el","from","children","forEach","header","beforeDestroy","disconnect","VgtFilterRow","populateInitialFilters","timer","hasFilterRow","col","filterOptions","enabled","fieldKey","emitEvent","isFilterable","isDropdown","filterDropdownItems","isDropdownObjects","_typeof","isDropdownArray","firstClass","split","join","getPlaceholder","placeholder","label","getName","updateFiltersOnEnter","clearTimeout","updateFiltersImmediately","updateFiltersOnKeyup","trigger","updateFilters","updateSlotFilter","fieldToFilter","slotFilterField","formatValue","setTimeout","$set","filterValue","headerRow","selectAllByGroup","collapsable","collectFormatted","formattedRow","fullColspan","groupIndex","groupChildObject","row","vgtSelected","columnCollapsable","currentIndex","toggleSelectGroup","checked","date","def","isRight","dateInputFormat","isValid","compareAsc","dateOutputFormat","console","error","number","Infinity","parseFloat","decimal","round","toFixed","percentage","boolean","dataTypes","coreDataTypes","keys","compName","isLoading","maxHeight","fixedHeader","theme","totalRows","responsive","rowStyleClass","compactMode","keepSelectedOnSearch","updatedSelectedOnSearch","groupOptions","rowKey","selectOptions","selectionInfoClass","selectionText","clearSelectionText","disableSelectInfo","sortOptions","multipleColumns","initialSortBy","paginationOptions","_ref","_defineProperty","position","perPageDropdown","searchOptions","externalQuery","searchFn","tableLoading","selectOnCheckboxOnly","selectAllByPage","maintainExpanded","expandedRowKeys","Set","defaultSortBy","searchTrigger","externalSearchQuery","searchPlaceholder","searchSkipDiacritics","selectedRowIndex","paginate","paginateOnTop","paginateOnBottom","paginationMode","paginationInfoFn","filteredRows","forceSearch","sortChanged","initializeSelect","isEqual","initializePagination","handleSearch","initializeSearch","initializeSort","selectedRows","tableStyles","tableStyleClasses","hasFooterSlot","wrapperStyles","overflow","rowKeyField","hasHeaderRowTemplate","$scopedSlots","showEmptySlot","selectedRowCount","selectedPageRowsCount","totalPageRowCount","totalRowCount","selectionInfo","selectedPageRows","_rows$","_this$originalRows$","processedRows","originalRows","r1","r2","originalIndex","hidden","groupHeaderOnTop","headerPosition","groupHeaderOnBottom","reduce","wrapStyleClasses","classes","globalSearchAllowed","computedRows","allRows","apply","globalSearchDisabled","rowCount","vgt_header_id","vgt_id","newHeaderRow","cRows","xRow","yRow","sortValue","srt","getColumnForField","xvalue","collect","yvalue","sortFn","typeDef","_this2","paginatedRows","childRows","_paginatedRows","pageStart","pageEnd","slice","reconstructedRows","flatRow","handleExpanded","hRow","find","_this3","nestedRows","handleGrouped","includes","hasRowClickListener","$listeners","has","toggleExpand","_this4","vgtIsExpanded","expandAll","_this5","collapseAll","_this6","clear","resetTable","emitSelectedRows","selected","unselectAllInternal","forceAll","_this7","_this8","_this9","_this$$refs","paginationBottom","paginationTop","pageChangedEvent","pagination","paginationPosition","perPageChangedEvent","changeSort","onCheckboxClicked","selectedIndex","pageIndex","Promise","reject","onRowDoubleClicked","onRowClicked","onRowAuxClicked","onCellClicked","rowIndex","onMouseenter","onMouseleave","searchTableOnEnter","searchTableOnKeyUp","obj","selector","splitter","dig","headerField","formatFn","isHeaderRow","element","_this$typedColumns$in","custom","vgt-right-align","vgt-left-align","_this12","fromFilter","instancesOfFiltering","_ret","_loop","newChildren","filterFn","getCurrentIndex","rowId","getRowStyleClass","rowStyleClasses","_this13","childRow","_this14","_this$paginationOptio","dropdownAllowAll","firstLabel","lastLabel","nextLabel","prevLabel","rowsPerPageLabel","ofLabel","pageLabel","allLabel","setCurrentPage","_perPageDropdown","_slicedToArray","_this$searchOptions","_this$sortOptions","initSortBy","ref","prototype","hasOwnProperty","_this$selectOptions","vgt-pagination","VgtPagination","vgt-global-search","VgtGlobalSearch","vgt-header-row","VgtHeaderRow","VgtTableHeader","VueGoodTablePlugin","install","Vue","component","VueGoodTable","use"],"mappings":";;;;;;;giEAAA,IACMA,EACO,MADPA,EAEQ,OAFRA,EAGE,OAGFC,EAEK,UAELC,EAAiC,CAAC,GAAI,GAAI,GAAI,GAAI,ICVpDC,EAAa,CACfC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC3DC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1EC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAClCC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACpFC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5CC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC3DC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzFC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MAEFC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACvCC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,KACxBC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1EC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IA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"}